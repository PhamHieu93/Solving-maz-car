
movement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000494c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004a60  08004a60  00014a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac0  08004ac0  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004ac0  08004ac0  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ac0  08004ac0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004ac8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000098  08004b60  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004b60  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a6f  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001527  00000000  00000000  00027b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  000290a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075b  00000000  00000000  00029a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017290  00000000  00000000  0002a17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a810  00000000  00000000  0004140b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088329  00000000  00000000  0004bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d00  00000000  00000000  000d3f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d6c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a44 	.word	0x08004a44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08004a44 	.word	0x08004a44

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <turn_right>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void turn_right(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	// phai_tien
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	480e      	ldr	r0, [pc, #56]	; (8000aac <turn_right+0x44>)
 8000a72:	f001 fe96 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <turn_right+0x44>)
 8000a7c:	f001 fe91 	bl	80027a2 <HAL_GPIO_WritePin>
	//trai_dung
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <turn_right+0x48>)
 8000a88:	f001 fe8b 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <turn_right+0x48>)
 8000a94:	f001 fe85 	bl	80027a2 <HAL_GPIO_WritePin>
	TIM2->CCR1=100;
 8000a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34


	HAL_Delay(200);
 8000aa0:	20c8      	movs	r0, #200	; 0xc8
 8000aa2:	f001 fbdb 	bl	800225c <HAL_Delay>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <turn_left>:
void turn_left(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	// phai_dung
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <turn_left+0x44>)
 8000abe:	f001 fe70 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <turn_left+0x44>)
 8000ac8:	f001 fe6b 	bl	80027a2 <HAL_GPIO_WritePin>
	//trai_tien
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad2:	480a      	ldr	r0, [pc, #40]	; (8000afc <turn_left+0x48>)
 8000ad4:	f001 fe65 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <turn_left+0x48>)
 8000ae0:	f001 fe5f 	bl	80027a2 <HAL_GPIO_WritePin>
	TIM2->CCR1=100;
 8000ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae8:	2264      	movs	r2, #100	; 0x64
 8000aea:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(200);
 8000aec:	20c8      	movs	r0, #200	; 0xc8
 8000aee:	f001 fbb5 	bl	800225c <HAL_Delay>

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <ford_ward>:
void ford_ward(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	// phai_tien
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2120      	movs	r1, #32
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <ford_ward+0x44>)
 8000b0a:	f001 fe4a 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <ford_ward+0x44>)
 8000b14:	f001 fe45 	bl	80027a2 <HAL_GPIO_WritePin>
	//trai_tien
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <ford_ward+0x48>)
 8000b20:	f001 fe3f 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <ford_ward+0x48>)
 8000b2c:	f001 fe39 	bl	80027a2 <HAL_GPIO_WritePin>
	TIM2->CCR1=40;
 8000b30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b34:	2228      	movs	r2, #40	; 0x28
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(200);
 8000b38:	20c8      	movs	r0, #200	; 0xc8
 8000b3a:	f001 fb8f 	bl	800225c <HAL_Delay>

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <stop>:
void stop(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	// phai_tien
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2120      	movs	r1, #32
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <stop+0x3c>)
 8000b56:	f001 fe24 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <stop+0x3c>)
 8000b60:	f001 fe1f 	bl	80027a2 <HAL_GPIO_WritePin>
	//trai_dung
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <stop+0x40>)
 8000b6c:	f001 fe19 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <stop+0x40>)
 8000b78:	f001 fe13 	bl	80027a2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b80:	f001 fb6c 	bl	800225c <HAL_Delay>

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	40010c00 	.word	0x40010c00

08000b90 <sensor_right>:
void sensor_right(){
 8000b90:	b598      	push	{r3, r4, r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9a:	483f      	ldr	r0, [pc, #252]	; (8000c98 <sensor_right+0x108>)
 8000b9c:	f001 fe01 	bl	80027a2 <HAL_GPIO_WritePin>
		      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <sensor_right+0x10c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
		      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000ba8:	bf00      	nop
 8000baa:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <sensor_right+0x10c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	2b09      	cmp	r3, #9
 8000bb2:	d9fa      	bls.n	8000baa <sensor_right+0x1a>
		      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bba:	4837      	ldr	r0, [pc, #220]	; (8000c98 <sensor_right+0x108>)
 8000bbc:	f001 fdf1 	bl	80027a2 <HAL_GPIO_WritePin>

		      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000bc0:	f001 fb42 	bl	8002248 <HAL_GetTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <sensor_right+0x110>)
 8000bc8:	6013      	str	r3, [r2, #0]
		      // wait for the echo pin to go high
		      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000bca:	bf00      	nop
 8000bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd0:	4831      	ldr	r0, [pc, #196]	; (8000c98 <sensor_right+0x108>)
 8000bd2:	f001 fdcf 	bl	8002774 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d108      	bne.n	8000bee <sensor_right+0x5e>
 8000bdc:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <sensor_right+0x110>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f103 040a 	add.w	r4, r3, #10
 8000be4:	f001 fb30 	bl	8002248 <HAL_GetTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	429c      	cmp	r4, r3
 8000bec:	d8ee      	bhi.n	8000bcc <sensor_right+0x3c>
		      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <sensor_right+0x10c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf4:	4a2b      	ldr	r2, [pc, #172]	; (8000ca4 <sensor_right+0x114>)
 8000bf6:	6013      	str	r3, [r2, #0]

		      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000bf8:	f001 fb26 	bl	8002248 <HAL_GetTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <sensor_right+0x110>)
 8000c00:	6013      	str	r3, [r2, #0]
		      // wait for the echo pin to go low
		      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000c02:	bf00      	nop
 8000c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c08:	4823      	ldr	r0, [pc, #140]	; (8000c98 <sensor_right+0x108>)
 8000c0a:	f001 fdb3 	bl	8002774 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d008      	beq.n	8000c26 <sensor_right+0x96>
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <sensor_right+0x110>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000c1c:	f001 fb14 	bl	8002248 <HAL_GetTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	429c      	cmp	r4, r3
 8000c24:	d8ee      	bhi.n	8000c04 <sensor_right+0x74>
		      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <sensor_right+0x10c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <sensor_right+0x118>)
 8000c2e:	6013      	str	r3, [r2, #0]

		      Distance = (Value2-Value1)* 0.034/2;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <sensor_right+0x118>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <sensor_right+0x114>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fbca 	bl	80003d4 <__aeabi_ui2d>
 8000c40:	a313      	add	r3, pc, #76	; (adr r3, 8000c90 <sensor_right+0x100>)
 8000c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c46:	f7ff fc3f 	bl	80004c8 <__aeabi_dmul>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4610      	mov	r0, r2
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5a:	f7ff fd5f 	bl	800071c <__aeabi_ddiv>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4610      	mov	r0, r2
 8000c64:	4619      	mov	r1, r3
 8000c66:	f7ff fedf 	bl	8000a28 <__aeabi_d2uiz>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <sensor_right+0x11c>)
 8000c70:	801a      	strh	r2, [r3, #0]
		      if ( Distance <= 12 ) led_right=1;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <sensor_right+0x11c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	2b0c      	cmp	r3, #12
 8000c78:	d803      	bhi.n	8000c82 <sensor_right+0xf2>
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <sensor_right+0x120>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	801a      	strh	r2, [r3, #0]
		      else led_right=0;

}
 8000c80:	e002      	b.n	8000c88 <sensor_right+0xf8>
		      else led_right=0;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <sensor_right+0x120>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	801a      	strh	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	bd98      	pop	{r3, r4, r7, pc}
 8000c8c:	f3af 8000 	nop.w
 8000c90:	b020c49c 	.word	0xb020c49c
 8000c94:	3fa16872 	.word	0x3fa16872
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	20000110 	.word	0x20000110
 8000ca0:	200000b4 	.word	0x200000b4
 8000ca4:	200000b8 	.word	0x200000b8
 8000ca8:	200000bc 	.word	0x200000bc
 8000cac:	200000d0 	.word	0x200000d0
 8000cb0:	20000104 	.word	0x20000104
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <sensor_left>:
void sensor_left(){
 8000cb8:	b598      	push	{r3, r4, r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc2:	483b      	ldr	r0, [pc, #236]	; (8000db0 <sensor_left+0xf8>)
 8000cc4:	f001 fd6d 	bl	80027a2 <HAL_GPIO_WritePin>
		  	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <sensor_left+0xfc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
		  	    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000cd0:	bf00      	nop
 8000cd2:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <sensor_left+0xfc>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	2b09      	cmp	r3, #9
 8000cda:	d9fa      	bls.n	8000cd2 <sensor_left+0x1a>
		  	    HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce2:	4833      	ldr	r0, [pc, #204]	; (8000db0 <sensor_left+0xf8>)
 8000ce4:	f001 fd5d 	bl	80027a2 <HAL_GPIO_WritePin>

		  	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000ce8:	f001 faae 	bl	8002248 <HAL_GetTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a32      	ldr	r2, [pc, #200]	; (8000db8 <sensor_left+0x100>)
 8000cf0:	6013      	str	r3, [r2, #0]
		  	    // wait for the echo pin to go high
		  	    while (!(HAL_GPIO_ReadPin (ECHO_PORT_1, ECHO_PIN_1)) && pMillis + 10 >  HAL_GetTick());
 8000cf2:	bf00      	nop
 8000cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf8:	482d      	ldr	r0, [pc, #180]	; (8000db0 <sensor_left+0xf8>)
 8000cfa:	f001 fd3b 	bl	8002774 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d108      	bne.n	8000d16 <sensor_left+0x5e>
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <sensor_left+0x100>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f103 040a 	add.w	r4, r3, #10
 8000d0c:	f001 fa9c 	bl	8002248 <HAL_GetTick>
 8000d10:	4603      	mov	r3, r0
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d8ee      	bhi.n	8000cf4 <sensor_left+0x3c>
		  	    Value3 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <sensor_left+0xfc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <sensor_left+0x104>)
 8000d1e:	6013      	str	r3, [r2, #0]

		  	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000d20:	f001 fa92 	bl	8002248 <HAL_GetTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <sensor_left+0x100>)
 8000d28:	6013      	str	r3, [r2, #0]
		  	    // wait for the echo pin to go low
		  	    while ((HAL_GPIO_ReadPin (ECHO_PORT_1, ECHO_PIN_1)) && pMillis + 50 > HAL_GetTick());
 8000d2a:	bf00      	nop
 8000d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d30:	481f      	ldr	r0, [pc, #124]	; (8000db0 <sensor_left+0xf8>)
 8000d32:	f001 fd1f 	bl	8002774 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <sensor_left+0x96>
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <sensor_left+0x100>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000d44:	f001 fa80 	bl	8002248 <HAL_GetTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	d8ee      	bhi.n	8000d2c <sensor_left+0x74>
		  	    Value4 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <sensor_left+0xfc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <sensor_left+0x108>)
 8000d56:	6013      	str	r3, [r2, #0]

		  	    Distance_1 = (Value4-Value3)/2/29.412;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <sensor_left+0x108>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <sensor_left+0x104>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	085b      	lsrs	r3, r3, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb35 	bl	80003d4 <__aeabi_ui2d>
 8000d6a:	a30f      	add	r3, pc, #60	; (adr r3, 8000da8 <sensor_left+0xf0>)
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	f7ff fcd4 	bl	800071c <__aeabi_ddiv>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fe54 	bl	8000a28 <__aeabi_d2uiz>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <sensor_left+0x10c>)
 8000d86:	801a      	strh	r2, [r3, #0]
		  	    if (Distance_1 <= 12) led_left=1;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <sensor_left+0x10c>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	2b0c      	cmp	r3, #12
 8000d8e:	d803      	bhi.n	8000d98 <sensor_left+0xe0>
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <sensor_left+0x110>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	801a      	strh	r2, [r3, #0]
		  	    else led_left=0;
}
 8000d96:	e002      	b.n	8000d9e <sensor_left+0xe6>
		  	    else led_left=0;
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <sensor_left+0x110>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	bd98      	pop	{r3, r4, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	d4fdf3b6 	.word	0xd4fdf3b6
 8000dac:	403d6978 	.word	0x403d6978
 8000db0:	40010800 	.word	0x40010800
 8000db4:	20000110 	.word	0x20000110
 8000db8:	200000b4 	.word	0x200000b4
 8000dbc:	200000c0 	.word	0x200000c0
 8000dc0:	200000c4 	.word	0x200000c4
 8000dc4:	200000dc 	.word	0x200000dc
 8000dc8:	20000108 	.word	0x20000108
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <sensor_forward>:
void sensor_forward(){
 8000dd0:	b598      	push	{r3, r4, r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dda:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <sensor_forward+0xf8>)
 8000ddc:	f001 fce1 	bl	80027a2 <HAL_GPIO_WritePin>
		  	  	  	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000de0:	4b3a      	ldr	r3, [pc, #232]	; (8000ecc <sensor_forward+0xfc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
		  	  	  	    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000de8:	bf00      	nop
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <sensor_forward+0xfc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	d9fa      	bls.n	8000dea <sensor_forward+0x1a>
		  	  	  	    HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfa:	4833      	ldr	r0, [pc, #204]	; (8000ec8 <sensor_forward+0xf8>)
 8000dfc:	f001 fcd1 	bl	80027a2 <HAL_GPIO_WritePin>

		  	  	  	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000e00:	f001 fa22 	bl	8002248 <HAL_GetTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4a32      	ldr	r2, [pc, #200]	; (8000ed0 <sensor_forward+0x100>)
 8000e08:	6013      	str	r3, [r2, #0]
		  	  	  	    // wait for the echo pin to go high
		  	  	  	    while (!(HAL_GPIO_ReadPin (ECHO_PORT_2, ECHO_PIN_2)) && pMillis + 10 >  HAL_GetTick());
 8000e0a:	bf00      	nop
 8000e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <sensor_forward+0xf8>)
 8000e12:	f001 fcaf 	bl	8002774 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d108      	bne.n	8000e2e <sensor_forward+0x5e>
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <sensor_forward+0x100>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f103 040a 	add.w	r4, r3, #10
 8000e24:	f001 fa10 	bl	8002248 <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d8ee      	bhi.n	8000e0c <sensor_forward+0x3c>
		  	  	  	    Value5 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <sensor_forward+0xfc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <sensor_forward+0x104>)
 8000e36:	6013      	str	r3, [r2, #0]

		  	  	  	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e38:	f001 fa06 	bl	8002248 <HAL_GetTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <sensor_forward+0x100>)
 8000e40:	6013      	str	r3, [r2, #0]
		  	  	  	    // wait for the echo pin to go low
		  	  	  	    while ((HAL_GPIO_ReadPin (ECHO_PORT_2, ECHO_PIN_2)) && pMillis + 50 > HAL_GetTick());
 8000e42:	bf00      	nop
 8000e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <sensor_forward+0xf8>)
 8000e4a:	f001 fc93 	bl	8002774 <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <sensor_forward+0x96>
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <sensor_forward+0x100>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000e5c:	f001 f9f4 	bl	8002248 <HAL_GetTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	429c      	cmp	r4, r3
 8000e64:	d8ee      	bhi.n	8000e44 <sensor_forward+0x74>
		  	  	  	    Value6 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <sensor_forward+0xfc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <sensor_forward+0x108>)
 8000e6e:	6013      	str	r3, [r2, #0]

		  	  	  	   Distance_2 = (Value6-Value5)/2/29.412;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <sensor_forward+0x108>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <sensor_forward+0x104>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff faa9 	bl	80003d4 <__aeabi_ui2d>
 8000e82:	a30f      	add	r3, pc, #60	; (adr r3, 8000ec0 <sensor_forward+0xf0>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff fc48 	bl	800071c <__aeabi_ddiv>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fdc8 	bl	8000a28 <__aeabi_d2uiz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <sensor_forward+0x10c>)
 8000e9e:	801a      	strh	r2, [r3, #0]
		  	  	  	   if (Distance_2 <= 12) led_front=1;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <sensor_forward+0x10c>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	2b0c      	cmp	r3, #12
 8000ea6:	d803      	bhi.n	8000eb0 <sensor_forward+0xe0>
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <sensor_forward+0x110>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	801a      	strh	r2, [r3, #0]
		  	  	  	   else led_front=0;

}
 8000eae:	e002      	b.n	8000eb6 <sensor_forward+0xe6>
		  	  	  	   else led_front=0;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <sensor_forward+0x110>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	bd98      	pop	{r3, r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	d4fdf3b6 	.word	0xd4fdf3b6
 8000ec4:	403d6978 	.word	0x403d6978
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	20000110 	.word	0x20000110
 8000ed0:	200000b4 	.word	0x200000b4
 8000ed4:	200000c8 	.word	0x200000c8
 8000ed8:	200000cc 	.word	0x200000cc
 8000edc:	200000de 	.word	0x200000de
 8000ee0:	20000106 	.word	0x20000106

08000ee4 <flood_fill>:

void flood_fill()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	f6ad 7dac 	subw	sp, sp, #4012	; 0xfac
 8000eea:	af00      	add	r7, sp, #0
  // ford_ward();
  // stop();
   unsigned char neighbour_val[] = {255,255,255,255};
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	f8c7 3fa0 	str.w	r3, [r7, #4000]	; 0xfa0
   unsigned char wallinfo = 0, x=0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3fa6 	strb.w	r3, [r7, #4006]	; 0xfa6
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3fa7 	strb.w	r3, [r7, #4007]	; 0xfa7
   int stk[1000]; // Stack of 1000 cell, stk_ptr pointer, stk_empty_flag = 0 when stack is not empty, = 1 when empty
   uint16_t floodcell = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8a7 3fa4 	strh.w	r3, [r7, #4004]	; 0xfa4
   stk[0] = 255;
 8000f06:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8000f0a:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 8000f0e:	22ff      	movs	r2, #255	; 0xff
 8000f10:	601a      	str	r2, [r3, #0]
   stkptr++;
 8000f12:	4b8d      	ldr	r3, [pc, #564]	; (8001148 <flood_fill+0x264>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a8b      	ldr	r2, [pc, #556]	; (8001148 <flood_fill+0x264>)
 8000f1a:	6013      	str	r3, [r2, #0]
   stk[stkptr] = current_cell;
 8000f1c:	4b8b      	ldr	r3, [pc, #556]	; (800114c <flood_fill+0x268>)
 8000f1e:	8819      	ldrh	r1, [r3, #0]
 8000f20:	4b89      	ldr	r3, [pc, #548]	; (8001148 <flood_fill+0x264>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8000f28:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   while (stk_empty_flag == 0)
 8000f30:	e0fd      	b.n	800112e <flood_fill+0x24a>
   {
	   //ford_ward();
	   //stop();

      floodcell = stk[stkptr];
 8000f32:	4b85      	ldr	r3, [pc, #532]	; (8001148 <flood_fill+0x264>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8000f3a:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	f8a7 3fa4 	strh.w	r3, [r7, #4004]	; 0xfa4

      if (stkptr == 1) stk_empty_flag = 1;
 8000f46:	4b80      	ldr	r3, [pc, #512]	; (8001148 <flood_fill+0x264>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d103      	bne.n	8000f56 <flood_fill+0x72>
 8000f4e:	4b80      	ldr	r3, [pc, #512]	; (8001150 <flood_fill+0x26c>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e004      	b.n	8000f60 <flood_fill+0x7c>
      else
      stkptr--;
 8000f56:	4b7c      	ldr	r3, [pc, #496]	; (8001148 <flood_fill+0x264>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	4a7a      	ldr	r2, [pc, #488]	; (8001148 <flood_fill+0x264>)
 8000f5e:	6013      	str	r3, [r2, #0]

      neighbour_val[0] = 255;
 8000f60:	23ff      	movs	r3, #255	; 0xff
 8000f62:	f887 3fa0 	strb.w	r3, [r7, #4000]	; 0xfa0
      neighbour_val[1] = 255;
 8000f66:	23ff      	movs	r3, #255	; 0xff
 8000f68:	f887 3fa1 	strb.w	r3, [r7, #4001]	; 0xfa1
      neighbour_val[2] = 255;
 8000f6c:	23ff      	movs	r3, #255	; 0xff
 8000f6e:	f887 3fa2 	strb.w	r3, [r7, #4002]	; 0xfa2
      neighbour_val[3] = 255;
 8000f72:	23ff      	movs	r3, #255	; 0xff
 8000f74:	f887 3fa3 	strb.w	r3, [r7, #4003]	; 0xfa3

      wallinfo = walldata[floodcell];
 8000f78:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 8000f7c:	4a75      	ldr	r2, [pc, #468]	; (8001154 <flood_fill+0x270>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	f887 3fa6 	strb.w	r3, [r7, #4006]	; 0xfa6
      // flood_cell = current cell, maze_flood like a new array for checking wall
      // If there is no wall, the cell at that direction is called neighbor_cell with current_cell
      if ((wallinfo & BIT0) == 0 )  // Check BIT data of NORTH wall, if not wall -> save the value into maze_flood
 8000f84:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d106      	bne.n	8000f9e <flood_fill+0xba>
         neighbour_val[0] = mazeflood[floodcell - 10]; //
 8000f90:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 8000f94:	3b0a      	subs	r3, #10
 8000f96:	4a70      	ldr	r2, [pc, #448]	; (8001158 <flood_fill+0x274>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	f887 3fa0 	strb.w	r3, [r7, #4000]	; 0xfa0

      //East
      if ((wallinfo & BIT1)==0 )   // same
 8000f9e:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <flood_fill+0xd4>
         neighbour_val[1] = mazeflood[floodcell + 1];
 8000faa:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a69      	ldr	r2, [pc, #420]	; (8001158 <flood_fill+0x274>)
 8000fb2:	5cd3      	ldrb	r3, [r2, r3]
 8000fb4:	f887 3fa1 	strb.w	r3, [r7, #4001]	; 0xfa1

      //South
      if ((wallinfo & BIT2)==0 )  // same
 8000fb8:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d106      	bne.n	8000fd2 <flood_fill+0xee>
         neighbour_val[2] = mazeflood[floodcell + 10];
 8000fc4:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 8000fc8:	330a      	adds	r3, #10
 8000fca:	4a63      	ldr	r2, [pc, #396]	; (8001158 <flood_fill+0x274>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	f887 3fa2 	strb.w	r3, [r7, #4002]	; 0xfa2

      //West
      if ((wallinfo & BIT3 )==0)   // same
 8000fd2:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d106      	bne.n	8000fec <flood_fill+0x108>
         neighbour_val[3] = mazeflood[floodcell - 1];
 8000fde:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <flood_fill+0x274>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	f887 3fa3 	strb.w	r3, [r7, #4003]	; 0xfa3

       // after save value of neighbor_cell, we will find the smallest value of 4
      // we will save the smallest in to neighbor_val[0]
      x = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 3fa7 	strb.w	r3, [r7, #4007]	; 0xfa7
      while (x < 3)
 8000ff2:	e01a      	b.n	800102a <flood_fill+0x146>
      {
    	   //ford_ward();
    	   //stop();
         if (neighbour_val[0] > (neighbour_val[x + 1]))
 8000ff4:	f897 2fa0 	ldrb.w	r2, [r7, #4000]	; 0xfa0
 8000ff8:	f897 3fa7 	ldrb.w	r3, [r7, #4007]	; 0xfa7
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001002:	443b      	add	r3, r7
 8001004:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001008:	429a      	cmp	r2, r3
 800100a:	d909      	bls.n	8001020 <flood_fill+0x13c>
            neighbour_val[0] = neighbour_val[x + 1];//
 800100c:	f897 3fa7 	ldrb.w	r3, [r7, #4007]	; 0xfa7
 8001010:	3301      	adds	r3, #1
 8001012:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001016:	443b      	add	r3, r7
 8001018:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800101c:	f887 3fa0 	strb.w	r3, [r7, #4000]	; 0xfa0

         x+=1;
 8001020:	f897 3fa7 	ldrb.w	r3, [r7, #4007]	; 0xfa7
 8001024:	3301      	adds	r3, #1
 8001026:	f887 3fa7 	strb.w	r3, [r7, #4007]	; 0xfa7
      while (x < 3)
 800102a:	f897 3fa7 	ldrb.w	r3, [r7, #4007]	; 0xfa7
 800102e:	2b02      	cmp	r3, #2
 8001030:	d9e0      	bls.n	8000ff4 <flood_fill+0x110>
      }
   // if current_cell != smallest neighbor_cell, we will update the value of current cell = neighbor_cell+ 1
      if ((floodcell != destination) && (mazeflood[floodcell] != (1+neighbour_val[0])))
 8001032:	4b4a      	ldr	r3, [pc, #296]	; (800115c <flood_fill+0x278>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	f8b7 2fa4 	ldrh.w	r2, [r7, #4004]	; 0xfa4
 800103a:	429a      	cmp	r2, r3
 800103c:	d077      	beq.n	800112e <flood_fill+0x24a>
 800103e:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 8001042:	4a45      	ldr	r2, [pc, #276]	; (8001158 <flood_fill+0x274>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	461a      	mov	r2, r3
 8001048:	f897 3fa0 	ldrb.w	r3, [r7, #4000]	; 0xfa0
 800104c:	3301      	adds	r3, #1
 800104e:	429a      	cmp	r2, r3
 8001050:	d06d      	beq.n	800112e <flood_fill+0x24a>

      {
    	  mazeflood[floodcell] = 1 + neighbour_val[0];         // update
 8001052:	f897 2fa0 	ldrb.w	r2, [r7, #4000]	; 0xfa0
 8001056:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 800105a:	3201      	adds	r2, #1
 800105c:	b2d1      	uxtb	r1, r2
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <flood_fill+0x274>)
 8001060:	54d1      	strb	r1, [r2, r3]

         //North
         if ((wallinfo & BIT0) ==0) // Due to update value, we need to update all, so take the value of NORTH cell into stack for check
 8001062:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d113      	bne.n	8001096 <flood_fill+0x1b2>
         {
            stkptr++;
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <flood_fill+0x264>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a34      	ldr	r2, [pc, #208]	; (8001148 <flood_fill+0x264>)
 8001076:	6013      	str	r3, [r2, #0]
            stk[stkptr] = floodcell - 10;
 8001078:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 800107c:	4a32      	ldr	r2, [pc, #200]	; (8001148 <flood_fill+0x264>)
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	f1a3 010a 	sub.w	r1, r3, #10
 8001084:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8001088:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            stk_empty_flag = 0;
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <flood_fill+0x26c>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
         }


         //East
         if ((wallinfo & BIT1)==0)// same
 8001096:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d112      	bne.n	80010c8 <flood_fill+0x1e4>
         {
            stkptr++;
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <flood_fill+0x264>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <flood_fill+0x264>)
 80010aa:	6013      	str	r3, [r2, #0]
            stk[stkptr] = floodcell + 1;
 80010ac:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 80010b0:	4a25      	ldr	r2, [pc, #148]	; (8001148 <flood_fill+0x264>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	1c59      	adds	r1, r3, #1
 80010b6:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80010ba:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 80010be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            stk_empty_flag = 0;
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <flood_fill+0x26c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
         }


         //South
         if ((wallinfo & BIT2)== 0)// same
 80010c8:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d113      	bne.n	80010fc <flood_fill+0x218>
         {
            stkptr++;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <flood_fill+0x264>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <flood_fill+0x264>)
 80010dc:	6013      	str	r3, [r2, #0]
            stk[stkptr] = floodcell + 10;
 80010de:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <flood_fill+0x264>)
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	f103 010a 	add.w	r1, r3, #10
 80010ea:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80010ee:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 80010f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            stk_empty_flag = 0;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <flood_fill+0x26c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
         }


         //West
         if ((wallinfo & BIT3)==0) // same
 80010fc:	f897 3fa6 	ldrb.w	r3, [r7, #4006]	; 0xfa6
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d112      	bne.n	800112e <flood_fill+0x24a>
         {
            stkptr++;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <flood_fill+0x264>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <flood_fill+0x264>)
 8001110:	6013      	str	r3, [r2, #0]
            stk[stkptr] = floodcell - 1;
 8001112:	f8b7 3fa4 	ldrh.w	r3, [r7, #4004]	; 0xfa4
 8001116:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <flood_fill+0x264>)
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	1e59      	subs	r1, r3, #1
 800111c:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8001120:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            stk_empty_flag = 0;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <flood_fill+0x26c>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
   while (stk_empty_flag == 0)
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <flood_fill+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f43f aefd 	beq.w	8000f32 <flood_fill+0x4e>
 	  // ford_ward();
 	  // stop();
   }
	  // ford_ward();
	  // stop();
}   //End flood_fill
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	f607 77ac 	addw	r7, r7, #4012	; 0xfac
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200000d4 	.word	0x200000d4
 800114c:	20000024 	.word	0x20000024
 8001150:	200000d8 	.word	0x200000d8
 8001154:	200000e0 	.word	0x200000e0
 8001158:	20000000 	.word	0x20000000
 800115c:	20000028 	.word	0x20000028

08001160 <stepper>:

uint16_t stepper(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
	 //  ford_ward();
	  // stop();
   uint16_t neighbour_val[4] = {255,255,255,255};
 8001166:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <stepper+0x164>)
 8001168:	463b      	mov	r3, r7
 800116a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116e:	e883 0003 	stmia.w	r3, {r0, r1}
   uint16_t min=1;
 8001172:	2301      	movs	r3, #1
 8001174:	81fb      	strh	r3, [r7, #14]
   unsigned char wallinfo = 0, x = 0, x2 = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	733b      	strb	r3, [r7, #12]
 800117a:	2300      	movs	r3, #0
 800117c:	737b      	strb	r3, [r7, #13]
 800117e:	2300      	movs	r3, #0
 8001180:	72fb      	strb	r3, [r7, #11]

   wallinfo = walldata[current_cell];
 8001182:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <stepper+0x168>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <stepper+0x16c>)
 800118a:	5c9b      	ldrb	r3, [r3, r2]
 800118c:	733b      	strb	r3, [r7, #12]


// after have a new value, we save the new into neighbor_val for finding the smallest and turn the direction to it
   if ((wallinfo & BIT0)== 0)
 800118e:	7b3b      	ldrb	r3, [r7, #12]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d106      	bne.n	80011a6 <stepper+0x46>
      neighbour_val[0] = mazeflood[current_cell - 6];
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <stepper+0x168>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	3b06      	subs	r3, #6
 800119e:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <stepper+0x170>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	803b      	strh	r3, [r7, #0]


   if ((wallinfo & BIT1) == 0)
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <stepper+0x5e>
      neighbour_val[1] = mazeflood[current_cell + 1];
 80011b0:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <stepper+0x168>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <stepper+0x170>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	807b      	strh	r3, [r7, #2]


   if ((wallinfo & BIT2)==0)
 80011be:	7b3b      	ldrb	r3, [r7, #12]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <stepper+0x76>
      neighbour_val[2] = mazeflood[current_cell + 6];
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <stepper+0x168>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	3306      	adds	r3, #6
 80011ce:	4a40      	ldr	r2, [pc, #256]	; (80012d0 <stepper+0x170>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	80bb      	strh	r3, [r7, #4]


   if ((wallinfo & BIT3)==0)
 80011d6:	7b3b      	ldrb	r3, [r7, #12]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <stepper+0x8e>
      neighbour_val[3] = mazeflood[current_cell - 1];
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <stepper+0x168>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <stepper+0x170>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	80fb      	strh	r3, [r7, #6]

   // find smallest
   x = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	737b      	strb	r3, [r7, #13]
   x2 = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	72fb      	strb	r3, [r7, #11]
   while (x < 3)
 80011f6:	e02c      	b.n	8001252 <stepper+0xf2>
   {

      if (neighbour_val[0] > neighbour_val[x + 1])
 80011f8:	883a      	ldrh	r2, [r7, #0]
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	3301      	adds	r3, #1
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	3310      	adds	r3, #16
 8001202:	443b      	add	r3, r7
 8001204:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d91f      	bls.n	800124c <stepper+0xec>
      {
         x2 = x + 1;
 800120c:	7b7b      	ldrb	r3, [r7, #13]
 800120e:	3301      	adds	r3, #1
 8001210:	72fb      	strb	r3, [r7, #11]
         min = pow(2, ( 2 * x2 )) ; // first, neighbor_val [4] have the value of 1 ( direction of North)
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8ec 	bl	80003f4 <__aeabi_i2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001228:	f002 fd04 	bl	8003c34 <pow>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fbf8 	bl	8000a28 <__aeabi_d2uiz>
 8001238:	4603      	mov	r3, r0
 800123a:	81fb      	strh	r3, [r7, #14]
         // if the value of neighbor_val from 1 to 3 is smaller, we will update the direction of neighbor_val[4]to 4, 16, or 64 ( E -> S -> W)
         neighbour_val[0] = neighbour_val[x + 1];
 800123c:	7b7b      	ldrb	r3, [r7, #13]
 800123e:	3301      	adds	r3, #1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	3310      	adds	r3, #16
 8001244:	443b      	add	r3, r7
 8001246:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800124a:	803b      	strh	r3, [r7, #0]

      }
      x += 1;
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	3301      	adds	r3, #1
 8001250:	737b      	strb	r3, [r7, #13]
   while (x < 3)
 8001252:	7b7b      	ldrb	r3, [r7, #13]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d9cf      	bls.n	80011f8 <stepper+0x98>
   }
  // consider the direction of car now with neighbor_val[4]
   if (current_dir == min) // same direction, move straight
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <stepper+0x174>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	89fa      	ldrh	r2, [r7, #14]
 8001260:	429a      	cmp	r2, r3
 8001262:	d103      	bne.n	800126c <stepper+0x10c>
   {
      min = 1; // straight
 8001264:	2301      	movs	r3, #1
 8001266:	81fb      	strh	r3, [r7, #14]
      return min;
 8001268:	89fb      	ldrh	r3, [r7, #14]
 800126a:	e027      	b.n	80012bc <stepper+0x15c>
   }
   // if direction == 64 and neighbor_val[4] == 1 -> direction follow North, from W to N, turn right
   if ( ((current_dir == 64) && (min == 1)) || (current_dir == (min/4)) )
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <stepper+0x174>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b40      	cmp	r3, #64	; 0x40
 8001272:	d102      	bne.n	800127a <stepper+0x11a>
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d007      	beq.n	800128a <stepper+0x12a>
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <stepper+0x174>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	b29b      	uxth	r3, r3
 8001286:	429a      	cmp	r2, r3
 8001288:	d103      	bne.n	8001292 <stepper+0x132>
   {
      min = 2; // right
 800128a:	2302      	movs	r3, #2
 800128c:	81fb      	strh	r3, [r7, #14]
      return min;
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	e014      	b.n	80012bc <stepper+0x15c>
   }
   // the same reason
   if ( ((current_dir == 1) && (min == 64)) || (current_dir == (4 * min)) )
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <stepper+0x174>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d102      	bne.n	80012a0 <stepper+0x140>
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	2b40      	cmp	r3, #64	; 0x40
 800129e:	d006      	beq.n	80012ae <stepper+0x14e>
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <stepper+0x174>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d103      	bne.n	80012b6 <stepper+0x156>
   {
      min = 3; //left
 80012ae:	2303      	movs	r3, #3
 80012b0:	81fb      	strh	r3, [r7, #14]
      return min;
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	e002      	b.n	80012bc <stepper+0x15c>
   }
   else
   {
	  min =4; //turn around
 80012b6:	2304      	movs	r3, #4
 80012b8:	81fb      	strh	r3, [r7, #14]
	  return min;
 80012ba:	89fb      	ldrh	r3, [r7, #14]
   }

}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08004a60 	.word	0x08004a60
 80012c8:	20000024 	.word	0x20000024
 80012cc:	200000e0 	.word	0x200000e0
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000026 	.word	0x20000026

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    walldata[0]=9;
 80012de:	4b5b      	ldr	r3, [pc, #364]	; (800144c <main+0x174>)
 80012e0:	2209      	movs	r2, #9
 80012e2:	701a      	strb	r2, [r3, #0]
    walldata[5]=3;
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <main+0x174>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	715a      	strb	r2, [r3, #5]
    walldata[30]=12;
 80012ea:	4b58      	ldr	r3, [pc, #352]	; (800144c <main+0x174>)
 80012ec:	220c      	movs	r2, #12
 80012ee:	779a      	strb	r2, [r3, #30]
    walldata[35]=6;
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <main+0x174>)
 80012f2:	2206      	movs	r2, #6
 80012f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    for (int i=1;i<5;i++)
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e007      	b.n	800130e <main+0x36>
    {
      walldata[i]=1;
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <main+0x174>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4413      	add	r3, r2
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
    for (int i=1;i<5;i++)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b04      	cmp	r3, #4
 8001312:	ddf4      	ble.n	80012fe <main+0x26>
    }
    for (int i=6;i<25;i+=6)
 8001314:	2306      	movs	r3, #6
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	e007      	b.n	800132a <main+0x52>
    {
      walldata[i]=8;
 800131a:	4a4c      	ldr	r2, [pc, #304]	; (800144c <main+0x174>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4413      	add	r3, r2
 8001320:	2208      	movs	r2, #8
 8001322:	701a      	strb	r2, [r3, #0]
    for (int i=6;i<25;i+=6)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3306      	adds	r3, #6
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b18      	cmp	r3, #24
 800132e:	ddf4      	ble.n	800131a <main+0x42>
    }
    for (int i=11;i<30;i+=10)
 8001330:	230b      	movs	r3, #11
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e007      	b.n	8001346 <main+0x6e>
    {
      walldata[i]=2;
 8001336:	4a45      	ldr	r2, [pc, #276]	; (800144c <main+0x174>)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	2202      	movs	r2, #2
 800133e:	701a      	strb	r2, [r3, #0]
    for (int i=11;i<30;i+=10)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	330a      	adds	r3, #10
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b1d      	cmp	r3, #29
 800134a:	ddf4      	ble.n	8001336 <main+0x5e>
    }
    for (int i=31;i<35;i++)
 800134c:	231f      	movs	r3, #31
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	e007      	b.n	8001362 <main+0x8a>
    {
      walldata[i]=4;
 8001352:	4a3e      	ldr	r2, [pc, #248]	; (800144c <main+0x174>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4413      	add	r3, r2
 8001358:	2204      	movs	r2, #4
 800135a:	701a      	strb	r2, [r3, #0]
    for (int i=31;i<35;i++)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3301      	adds	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b22      	cmp	r3, #34	; 0x22
 8001366:	ddf4      	ble.n	8001352 <main+0x7a>
    }
	walldata[current_cell]=((walldata[current_cell]) | (1<<7) | (1<<1) | (0<<0) );
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <main+0x178>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <main+0x174>)
 8001370:	5c9b      	ldrb	r3, [r3, r2]
 8001372:	4a37      	ldr	r2, [pc, #220]	; (8001450 <main+0x178>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	f063 037d 	orn	r3, r3, #125	; 0x7d
 800137a:	b2d9      	uxtb	r1, r3
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <main+0x174>)
 800137e:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f000 ff0a 	bl	8002198 <HAL_Init>

  /* USER CODE BEGIN Init */
  int timer_1=HAL_GetTick();
 8001384:	f000 ff60 	bl	8002248 <HAL_GetTick>
 8001388:	4603      	mov	r3, r0
 800138a:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 fc62 	bl	8001c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 fd76 	bl	8001e80 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001394:	f000 fca4 	bl	8001ce0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001398:	f000 fcf2 	bl	8001d80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//PA1 TIm2 channel 2 ENB
 800139c:	2100      	movs	r1, #0
 800139e:	482d      	ldr	r0, [pc, #180]	; (8001454 <main+0x17c>)
 80013a0:	f001 fee8 	bl	8003174 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);//PA11 TIM1 channel 4 ENA
 80013a4:	2104      	movs	r1, #4
 80013a6:	482b      	ldr	r0, [pc, #172]	; (8001454 <main+0x17c>)
 80013a8:	f001 fee4 	bl	8003174 <HAL_TIM_PWM_Start>

 // HAL_GPIO_WritePin(GPIOB, TRIG_PIN_1, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(GPIOB, TRIG_PIN_2, GPIO_PIN_RESET);
  HAL_TIM_Base_Start(&htim1);
 80013ac:	482a      	ldr	r0, [pc, #168]	; (8001458 <main+0x180>)
 80013ae:	f001 fe3f 	bl	8003030 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b8:	4828      	ldr	r0, [pc, #160]	; (800145c <main+0x184>)
 80013ba:	f001 f9f2 	bl	80027a2 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (count==0)
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <main+0x188>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d150      	bne.n	8001468 <main+0x190>
	  {
		  HAL_Delay(5000);
 80013c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80013ca:	f000 ff47 	bl	800225c <HAL_Delay>
		  ford_ward();
 80013ce:	f7ff fb97 	bl	8000b00 <ford_ward>
		  stop();
 80013d2:	f7ff fbbb 	bl	8000b4c <stop>
		   if (current_dir==1)current_cell=current_cell-6; //NORTH
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <main+0x18c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d105      	bne.n	80013ea <main+0x112>
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <main+0x178>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	3b06      	subs	r3, #6
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <main+0x178>)
 80013e8:	801a      	strh	r2, [r3, #0]
		   if (current_dir==4)current_cell=current_cell+1;  // EAST
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <main+0x18c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d105      	bne.n	80013fe <main+0x126>
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <main+0x178>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <main+0x178>)
 80013fc:	801a      	strh	r2, [r3, #0]
		   if (current_dir==16)current_cell=current_cell+6; // SOUTH
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <main+0x18c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d105      	bne.n	8001412 <main+0x13a>
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <main+0x178>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	3306      	adds	r3, #6
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <main+0x178>)
 8001410:	801a      	strh	r2, [r3, #0]
		   if (current_dir==64)current_cell=current_cell-1; //WEST
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <main+0x18c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b40      	cmp	r3, #64	; 0x40
 8001418:	d105      	bne.n	8001426 <main+0x14e>
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <main+0x178>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <main+0x178>)
 8001424:	801a      	strh	r2, [r3, #0]
			walldata[current_cell]=((walldata[current_cell]) | (1<<7) | (0<<1) | (1<<0) );
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <main+0x178>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <main+0x174>)
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <main+0x178>)
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8001438:	b2d9      	uxtb	r1, r3
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <main+0x174>)
 800143c:	5499      	strb	r1, [r3, r2]

		   count++;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <main+0x188>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <main+0x188>)
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	e7b8      	b.n	80013be <main+0xe6>
 800144c:	200000e0 	.word	0x200000e0
 8001450:	20000024 	.word	0x20000024
 8001454:	20000158 	.word	0x20000158
 8001458:	20000110 	.word	0x20000110
 800145c:	40010c00 	.word	0x40010c00
 8001460:	2000010c 	.word	0x2000010c
 8001464:	20000026 	.word	0x20000026
	  }
	  else
	  {
		  sensor_right();
 8001468:	f7ff fb92 	bl	8000b90 <sensor_right>
		  sensor_left();
 800146c:	f7ff fc24 	bl	8000cb8 <sensor_left>
		  sensor_forward();
 8001470:	f7ff fcae 	bl	8000dd0 <sensor_forward>
	      if (current_dir == 1 ) // North direction
 8001474:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <main+0x3c8>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	f040 80b8 	bne.w	80015ee <main+0x316>
	      {
	    	  if ((walldata [current_cell] & BIT7) == 0)
 800147e:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <main+0x3cc>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <main+0x3d0>)
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	db1c      	blt.n	80014c8 <main+0x1f0>
	    		  walldata[current_cell]=((walldata[current_cell]) | (1<<7) | (led_left<<3) | (led_right<<1) | (led_front<<0) | (0<<2) );
 800148e:	4b85      	ldr	r3, [pc, #532]	; (80016a4 <main+0x3cc>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <main+0x3d0>)
 8001496:	5c9a      	ldrb	r2, [r3, r2]
 8001498:	4b84      	ldr	r3, [pc, #528]	; (80016ac <main+0x3d4>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <main+0x3d8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b80      	ldr	r3, [pc, #512]	; (80016b4 <main+0x3dc>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4a7a      	ldr	r2, [pc, #488]	; (80016a4 <main+0x3cc>)
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014c2:	b2d9      	uxtb	r1, r3
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <main+0x3d0>)
 80014c6:	5499      	strb	r1, [r3, r2]

			  if ( ((walldata[current_cell+1] & BIT7)==0) && (current_cell != 5) && (current_cell != 11)
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <main+0x3cc>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <main+0x3d0>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db28      	blt.n	800152a <main+0x252>
 80014d8:	4b72      	ldr	r3, [pc, #456]	; (80016a4 <main+0x3cc>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d024      	beq.n	800152a <main+0x252>
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <main+0x3cc>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b0b      	cmp	r3, #11
 80014e6:	d020      	beq.n	800152a <main+0x252>
					  && (current_cell != 17) && (current_cell != 23) && (current_cell != 29) && (current_cell != 35)
 80014e8:	4b6e      	ldr	r3, [pc, #440]	; (80016a4 <main+0x3cc>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2b11      	cmp	r3, #17
 80014ee:	d01c      	beq.n	800152a <main+0x252>
 80014f0:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <main+0x3cc>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	2b17      	cmp	r3, #23
 80014f6:	d018      	beq.n	800152a <main+0x252>
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <main+0x3cc>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	2b1d      	cmp	r3, #29
 80014fe:	d014      	beq.n	800152a <main+0x252>
 8001500:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <main+0x3cc>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	2b23      	cmp	r3, #35	; 0x23
 8001506:	d010      	beq.n	800152a <main+0x252>
					  && led_right==1 )
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <main+0x3d8>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10c      	bne.n	800152a <main+0x252>
          {
				  walldata[current_cell+1]=((walldata[current_cell+1]) | (1<<7) | (1<<3));
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <main+0x3cc>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a64      	ldr	r2, [pc, #400]	; (80016a8 <main+0x3d0>)
 8001518:	5cd2      	ldrb	r2, [r2, r3]
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <main+0x3cc>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	f062 0277 	orn	r2, r2, #119	; 0x77
 8001524:	b2d1      	uxtb	r1, r2
 8001526:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <main+0x3d0>)
 8001528:	54d1      	strb	r1, [r2, r3]
          }



			  if (((walldata[current_cell-1] & BIT7)==0 ) && (current_cell != 0) && (current_cell != 6)
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <main+0x3cc>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	4a5d      	ldr	r2, [pc, #372]	; (80016a8 <main+0x3d0>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	b25b      	sxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	db28      	blt.n	800158c <main+0x2b4>
 800153a:	4b5a      	ldr	r3, [pc, #360]	; (80016a4 <main+0x3cc>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d024      	beq.n	800158c <main+0x2b4>
 8001542:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <main+0x3cc>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d020      	beq.n	800158c <main+0x2b4>
					  && (current_cell != 12) && (current_cell != 18) && (current_cell != 24) && (current_cell != 30)
 800154a:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <main+0x3cc>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d01c      	beq.n	800158c <main+0x2b4>
 8001552:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <main+0x3cc>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d018      	beq.n	800158c <main+0x2b4>
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <main+0x3cc>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	2b18      	cmp	r3, #24
 8001560:	d014      	beq.n	800158c <main+0x2b4>
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <main+0x3cc>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	2b1e      	cmp	r3, #30
 8001568:	d010      	beq.n	800158c <main+0x2b4>
					  && led_left==1 )
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <main+0x3d4>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10c      	bne.n	800158c <main+0x2b4>
        {

          walldata[current_cell-1]=((walldata[current_cell-1]) | (1<<7) | (1<<1));
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <main+0x3cc>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <main+0x3d0>)
 800157a:	5cd2      	ldrb	r2, [r2, r3]
 800157c:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <main+0x3cc>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <main+0x3d0>)
 800158a:	54d1      	strb	r1, [r2, r3]

        }

			  if (((walldata[current_cell-6] & BIT7)==0 ) && (current_cell != 0) && (current_cell != 1)
 800158c:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <main+0x3cc>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	3b06      	subs	r3, #6
 8001592:	4a45      	ldr	r2, [pc, #276]	; (80016a8 <main+0x3d0>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	db28      	blt.n	80015ee <main+0x316>
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <main+0x3cc>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d024      	beq.n	80015ee <main+0x316>
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <main+0x3cc>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d020      	beq.n	80015ee <main+0x316>
					  && (current_cell != 2) && (current_cell != 3) && (current_cell != 4) && (current_cell != 5)
 80015ac:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <main+0x3cc>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d01c      	beq.n	80015ee <main+0x316>
 80015b4:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <main+0x3cc>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d018      	beq.n	80015ee <main+0x316>
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <main+0x3cc>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d014      	beq.n	80015ee <main+0x316>
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <main+0x3cc>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d010      	beq.n	80015ee <main+0x316>
					  && led_front==1 )
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <main+0x3dc>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10c      	bne.n	80015ee <main+0x316>
        {
          walldata[current_cell-6]=((walldata[current_cell-6]) | (1<<7) | (1<<2));
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <main+0x3cc>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	3b06      	subs	r3, #6
 80015da:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <main+0x3d0>)
 80015dc:	5cd2      	ldrb	r2, [r2, r3]
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <main+0x3cc>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	3b06      	subs	r3, #6
 80015e4:	f062 027b 	orn	r2, r2, #123	; 0x7b
 80015e8:	b2d1      	uxtb	r1, r2
 80015ea:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <main+0x3d0>)
 80015ec:	54d1      	strb	r1, [r2, r3]

        }
	      }

	      if (current_dir ==4 ) //East direction
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <main+0x3c8>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	f040 80c5 	bne.w	8001782 <main+0x4aa>
	      {
	    	  if ((walldata [current_cell]& BIT7) == 0)
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <main+0x3cc>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <main+0x3d0>)
 8001600:	5c9b      	ldrb	r3, [r3, r2]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	db1c      	blt.n	8001642 <main+0x36a>
	    		  walldata[current_cell]=((walldata[current_cell]) | (1<<7) | (led_left<<0) | (led_right<<2) | (led_front<<1) | (0<<3)) ;
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <main+0x3cc>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <main+0x3d0>)
 8001610:	5c9a      	ldrb	r2, [r3, r2]
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <main+0x3d4>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <main+0x3d8>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <main+0x3dc>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <main+0x3cc>)
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800163c:	b2d9      	uxtb	r1, r3
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <main+0x3d0>)
 8001640:	5499      	strb	r1, [r3, r2]
			  if (((walldata[current_cell+1] & BIT7)==0 ) && (current_cell != 5) && (current_cell != 11)
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <main+0x3cc>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <main+0x3d0>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	b25b      	sxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	db35      	blt.n	80016be <main+0x3e6>
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <main+0x3cc>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d031      	beq.n	80016be <main+0x3e6>
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <main+0x3cc>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	2b0b      	cmp	r3, #11
 8001660:	d02d      	beq.n	80016be <main+0x3e6>
					  && (current_cell != 17) && (current_cell != 23) && (current_cell != 29) && (current_cell != 35)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <main+0x3cc>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	2b11      	cmp	r3, #17
 8001668:	d029      	beq.n	80016be <main+0x3e6>
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <main+0x3cc>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	2b17      	cmp	r3, #23
 8001670:	d025      	beq.n	80016be <main+0x3e6>
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <main+0x3cc>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	2b1d      	cmp	r3, #29
 8001678:	d021      	beq.n	80016be <main+0x3e6>
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <main+0x3cc>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	2b23      	cmp	r3, #35	; 0x23
 8001680:	d01d      	beq.n	80016be <main+0x3e6>
					  && led_front==1 )
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <main+0x3dc>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d119      	bne.n	80016be <main+0x3e6>
				  walldata[current_cell+1]=((walldata[current_cell+1]) | (1<<7) | (1<<3));
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <main+0x3cc>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <main+0x3d0>)
 8001692:	5cd2      	ldrb	r2, [r2, r3]
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <main+0x3cc>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	f062 0277 	orn	r2, r2, #119	; 0x77
 800169e:	e00b      	b.n	80016b8 <main+0x3e0>
 80016a0:	20000026 	.word	0x20000026
 80016a4:	20000024 	.word	0x20000024
 80016a8:	200000e0 	.word	0x200000e0
 80016ac:	20000108 	.word	0x20000108
 80016b0:	20000104 	.word	0x20000104
 80016b4:	20000106 	.word	0x20000106
 80016b8:	b2d1      	uxtb	r1, r2
 80016ba:	4a89      	ldr	r2, [pc, #548]	; (80018e0 <main+0x608>)
 80016bc:	54d1      	strb	r1, [r2, r3]

			  if (((walldata[current_cell-6] & BIT7)==0 ) && (current_cell != 30) && (current_cell != 31)
 80016be:	4b89      	ldr	r3, [pc, #548]	; (80018e4 <main+0x60c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	3b06      	subs	r3, #6
 80016c4:	4a86      	ldr	r2, [pc, #536]	; (80018e0 <main+0x608>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db28      	blt.n	8001720 <main+0x448>
 80016ce:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <main+0x60c>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	2b1e      	cmp	r3, #30
 80016d4:	d024      	beq.n	8001720 <main+0x448>
 80016d6:	4b83      	ldr	r3, [pc, #524]	; (80018e4 <main+0x60c>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	2b1f      	cmp	r3, #31
 80016dc:	d020      	beq.n	8001720 <main+0x448>
					  && (current_cell != 32) && (current_cell != 33) && (current_cell != 34) && (current_cell != 35)
 80016de:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <main+0x60c>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d01c      	beq.n	8001720 <main+0x448>
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <main+0x60c>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2b21      	cmp	r3, #33	; 0x21
 80016ec:	d018      	beq.n	8001720 <main+0x448>
 80016ee:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <main+0x60c>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	2b22      	cmp	r3, #34	; 0x22
 80016f4:	d014      	beq.n	8001720 <main+0x448>
 80016f6:	4b7b      	ldr	r3, [pc, #492]	; (80018e4 <main+0x60c>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2b23      	cmp	r3, #35	; 0x23
 80016fc:	d010      	beq.n	8001720 <main+0x448>
					  && led_left==1 )
 80016fe:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <main+0x610>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10c      	bne.n	8001720 <main+0x448>
				  walldata[current_cell-6]=((walldata[current_cell-6]) | (1<<7) | (1<<2));
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <main+0x60c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	3b06      	subs	r3, #6
 800170c:	4a74      	ldr	r2, [pc, #464]	; (80018e0 <main+0x608>)
 800170e:	5cd2      	ldrb	r2, [r2, r3]
 8001710:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <main+0x60c>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	3b06      	subs	r3, #6
 8001716:	f062 027b 	orn	r2, r2, #123	; 0x7b
 800171a:	b2d1      	uxtb	r1, r2
 800171c:	4a70      	ldr	r2, [pc, #448]	; (80018e0 <main+0x608>)
 800171e:	54d1      	strb	r1, [r2, r3]

			  if (((walldata[current_cell+6] & BIT7)==0 ) && (current_cell != 0) && (current_cell != 1)
 8001720:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <main+0x60c>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	3306      	adds	r3, #6
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <main+0x608>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	b25b      	sxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	db28      	blt.n	8001782 <main+0x4aa>
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <main+0x60c>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d024      	beq.n	8001782 <main+0x4aa>
 8001738:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <main+0x60c>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d020      	beq.n	8001782 <main+0x4aa>
					  && (current_cell != 2) && (current_cell != 3) && (current_cell != 4) && (current_cell != 5)
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <main+0x60c>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d01c      	beq.n	8001782 <main+0x4aa>
 8001748:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <main+0x60c>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d018      	beq.n	8001782 <main+0x4aa>
 8001750:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <main+0x60c>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d014      	beq.n	8001782 <main+0x4aa>
 8001758:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <main+0x60c>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	2b05      	cmp	r3, #5
 800175e:	d010      	beq.n	8001782 <main+0x4aa>
					  && led_right==1 )
 8001760:	4b62      	ldr	r3, [pc, #392]	; (80018ec <main+0x614>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10c      	bne.n	8001782 <main+0x4aa>
				  walldata[current_cell+6]=((walldata[current_cell+6]) | (1<<7) | (1<<0));
 8001768:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <main+0x60c>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	3306      	adds	r3, #6
 800176e:	4a5c      	ldr	r2, [pc, #368]	; (80018e0 <main+0x608>)
 8001770:	5cd2      	ldrb	r2, [r2, r3]
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <main+0x60c>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	3306      	adds	r3, #6
 8001778:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800177c:	b2d1      	uxtb	r1, r2
 800177e:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <main+0x608>)
 8001780:	54d1      	strb	r1, [r2, r3]
	      }

	      if (current_dir ==16 )// South direction
 8001782:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <main+0x618>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b10      	cmp	r3, #16
 8001788:	f040 80c7 	bne.w	800191a <main+0x642>
	      {

	    	  if ((walldata [current_cell]& BIT7) == 0)
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <main+0x60c>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <main+0x608>)
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	db1d      	blt.n	80017d8 <main+0x500>
	    		  walldata[current_cell]=((walldata[current_cell]) | (1<<7) | (led_left<<1) | (led_right<<3) | (led_front<<2) | (0<<0) );
 800179c:	4b51      	ldr	r3, [pc, #324]	; (80018e4 <main+0x60c>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <main+0x608>)
 80017a4:	5c9a      	ldrb	r2, [r3, r2]
 80017a6:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <main+0x610>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <main+0x614>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <main+0x61c>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <main+0x60c>)
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d2:	b2d9      	uxtb	r1, r3
 80017d4:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <main+0x608>)
 80017d6:	5499      	strb	r1, [r3, r2]
			  if (((walldata[current_cell+1] & BIT7)==0 ) && (current_cell != 5) && (current_cell != 11)
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <main+0x60c>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a40      	ldr	r2, [pc, #256]	; (80018e0 <main+0x608>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db28      	blt.n	800183a <main+0x562>
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <main+0x60c>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d024      	beq.n	800183a <main+0x562>
 80017f0:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <main+0x60c>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2b0b      	cmp	r3, #11
 80017f6:	d020      	beq.n	800183a <main+0x562>
					  && (current_cell != 17) && (current_cell != 23) && (current_cell != 29) && (current_cell != 35)
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <main+0x60c>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d01c      	beq.n	800183a <main+0x562>
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <main+0x60c>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2b17      	cmp	r3, #23
 8001806:	d018      	beq.n	800183a <main+0x562>
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <main+0x60c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b1d      	cmp	r3, #29
 800180e:	d014      	beq.n	800183a <main+0x562>
 8001810:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <main+0x60c>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b23      	cmp	r3, #35	; 0x23
 8001816:	d010      	beq.n	800183a <main+0x562>
					  && led_left==1 )
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <main+0x610>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10c      	bne.n	800183a <main+0x562>
				  walldata[current_cell+1]=((walldata[current_cell+1]) | (1<<7) | (1<<3));
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <main+0x60c>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <main+0x608>)
 8001828:	5cd2      	ldrb	r2, [r2, r3]
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <main+0x60c>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	f062 0277 	orn	r2, r2, #119	; 0x77
 8001834:	b2d1      	uxtb	r1, r2
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <main+0x608>)
 8001838:	54d1      	strb	r1, [r2, r3]

			  if (((walldata[current_cell-1] & BIT7)==0 ) && (current_cell != 0) && (current_cell != 6)
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <main+0x60c>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <main+0x608>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	b25b      	sxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	db28      	blt.n	800189c <main+0x5c4>
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <main+0x60c>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d024      	beq.n	800189c <main+0x5c4>
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <main+0x60c>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b06      	cmp	r3, #6
 8001858:	d020      	beq.n	800189c <main+0x5c4>
					  && (current_cell != 12) && (current_cell != 18) && (current_cell != 24) && (current_cell != 30)
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <main+0x60c>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d01c      	beq.n	800189c <main+0x5c4>
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <main+0x60c>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b12      	cmp	r3, #18
 8001868:	d018      	beq.n	800189c <main+0x5c4>
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <main+0x60c>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	2b18      	cmp	r3, #24
 8001870:	d014      	beq.n	800189c <main+0x5c4>
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <main+0x60c>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	2b1e      	cmp	r3, #30
 8001878:	d010      	beq.n	800189c <main+0x5c4>
					  && led_right==1 )
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <main+0x614>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10c      	bne.n	800189c <main+0x5c4>
				  walldata[current_cell-1]=((walldata[current_cell-1]) | (1<<7) | (1<<1));
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <main+0x60c>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <main+0x608>)
 800188a:	5cd2      	ldrb	r2, [r2, r3]
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <main+0x60c>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8001896:	b2d1      	uxtb	r1, r2
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <main+0x608>)
 800189a:	54d1      	strb	r1, [r2, r3]

			  if (((walldata[current_cell+6] & BIT7)==0 ) && (current_cell != 0) && (current_cell != 1)
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <main+0x60c>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	3306      	adds	r3, #6
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <main+0x608>)
 80018a4:	5cd3      	ldrb	r3, [r2, r3]
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db36      	blt.n	800191a <main+0x642>
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <main+0x60c>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d032      	beq.n	800191a <main+0x642>
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <main+0x60c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d02e      	beq.n	800191a <main+0x642>
					  && (current_cell != 2) && (current_cell != 3) && (current_cell != 4) && (current_cell != 5)
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <main+0x60c>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d02a      	beq.n	800191a <main+0x642>
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <main+0x60c>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d026      	beq.n	800191a <main+0x642>
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <main+0x60c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d022      	beq.n	800191a <main+0x642>
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <main+0x60c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d01e      	beq.n	800191a <main+0x642>
 80018dc:	e00c      	b.n	80018f8 <main+0x620>
 80018de:	bf00      	nop
 80018e0:	200000e0 	.word	0x200000e0
 80018e4:	20000024 	.word	0x20000024
 80018e8:	20000108 	.word	0x20000108
 80018ec:	20000104 	.word	0x20000104
 80018f0:	20000026 	.word	0x20000026
 80018f4:	20000106 	.word	0x20000106
					  && led_front==1 )
 80018f8:	4b80      	ldr	r3, [pc, #512]	; (8001afc <main+0x824>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d10c      	bne.n	800191a <main+0x642>
				  walldata[current_cell+6]=((walldata[current_cell+6]) | (1<<7) | (1<<2));
 8001900:	4b7f      	ldr	r3, [pc, #508]	; (8001b00 <main+0x828>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	3306      	adds	r3, #6
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <main+0x82c>)
 8001908:	5cd2      	ldrb	r2, [r2, r3]
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <main+0x828>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	3306      	adds	r3, #6
 8001910:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8001914:	b2d1      	uxtb	r1, r2
 8001916:	4a7b      	ldr	r2, [pc, #492]	; (8001b04 <main+0x82c>)
 8001918:	54d1      	strb	r1, [r2, r3]
	      }

	      if (current_dir ==64 )// West direction
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <main+0x830>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b40      	cmp	r3, #64	; 0x40
 8001920:	f040 80b8 	bne.w	8001a94 <main+0x7bc>
	      {

	    	  if ((walldata [current_cell]& BIT7) == 0)
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <main+0x828>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <main+0x82c>)
 800192c:	5c9b      	ldrb	r3, [r3, r2]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	db1c      	blt.n	800196e <main+0x696>
	    		  walldata[current_cell]=((walldata[current_cell]) | (1<<7) | (led_left<<2) | (led_right<<0) | (led_front<<3) | (0<<1) );
 8001934:	4b72      	ldr	r3, [pc, #456]	; (8001b00 <main+0x828>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <main+0x82c>)
 800193c:	5c9a      	ldrb	r2, [r3, r2]
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <main+0x834>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <main+0x838>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b69      	ldr	r3, [pc, #420]	; (8001afc <main+0x824>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4a67      	ldr	r2, [pc, #412]	; (8001b00 <main+0x828>)
 8001962:	8812      	ldrh	r2, [r2, #0]
 8001964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001968:	b2d9      	uxtb	r1, r3
 800196a:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <main+0x82c>)
 800196c:	5499      	strb	r1, [r3, r2]
			  if (((walldata[current_cell-1] & BIT7)==0 ) && (current_cell != 0) && (current_cell != 6)
 800196e:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <main+0x828>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <main+0x82c>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	b25b      	sxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	db28      	blt.n	80019d0 <main+0x6f8>
 800197e:	4b60      	ldr	r3, [pc, #384]	; (8001b00 <main+0x828>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d024      	beq.n	80019d0 <main+0x6f8>
 8001986:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <main+0x828>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	2b06      	cmp	r3, #6
 800198c:	d020      	beq.n	80019d0 <main+0x6f8>
					  && (current_cell != 12) && (current_cell != 18) && (current_cell != 24) && (current_cell != 30)
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <main+0x828>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d01c      	beq.n	80019d0 <main+0x6f8>
 8001996:	4b5a      	ldr	r3, [pc, #360]	; (8001b00 <main+0x828>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2b12      	cmp	r3, #18
 800199c:	d018      	beq.n	80019d0 <main+0x6f8>
 800199e:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <main+0x828>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	2b18      	cmp	r3, #24
 80019a4:	d014      	beq.n	80019d0 <main+0x6f8>
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <main+0x828>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	2b1e      	cmp	r3, #30
 80019ac:	d010      	beq.n	80019d0 <main+0x6f8>
						  && led_right==1 )
 80019ae:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <main+0x838>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d10c      	bne.n	80019d0 <main+0x6f8>
					  walldata[current_cell-1]=((walldata[current_cell-1]) | (1<<7) | (1<<1));
 80019b6:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <main+0x828>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	4a51      	ldr	r2, [pc, #324]	; (8001b04 <main+0x82c>)
 80019be:	5cd2      	ldrb	r2, [r2, r3]
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <main+0x828>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80019ca:	b2d1      	uxtb	r1, r2
 80019cc:	4a4d      	ldr	r2, [pc, #308]	; (8001b04 <main+0x82c>)
 80019ce:	54d1      	strb	r1, [r2, r3]

			  if (((walldata[current_cell-6] & BIT7)==0 ) && (current_cell != 30) && (current_cell != 31)
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <main+0x828>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	3b06      	subs	r3, #6
 80019d6:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <main+0x82c>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db28      	blt.n	8001a32 <main+0x75a>
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <main+0x828>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	2b1e      	cmp	r3, #30
 80019e6:	d024      	beq.n	8001a32 <main+0x75a>
 80019e8:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <main+0x828>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2b1f      	cmp	r3, #31
 80019ee:	d020      	beq.n	8001a32 <main+0x75a>
					  && (current_cell != 32) && (current_cell != 33) && (current_cell != 34) && (current_cell != 35)
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <main+0x828>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d01c      	beq.n	8001a32 <main+0x75a>
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <main+0x828>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2b21      	cmp	r3, #33	; 0x21
 80019fe:	d018      	beq.n	8001a32 <main+0x75a>
 8001a00:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <main+0x828>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b22      	cmp	r3, #34	; 0x22
 8001a06:	d014      	beq.n	8001a32 <main+0x75a>
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <main+0x828>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b23      	cmp	r3, #35	; 0x23
 8001a0e:	d010      	beq.n	8001a32 <main+0x75a>
					  && led_left==1 )
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <main+0x834>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10c      	bne.n	8001a32 <main+0x75a>
				  walldata[current_cell-6]=((walldata[current_cell-6]) | (1<<7) | (1<<2));
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <main+0x828>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	3b06      	subs	r3, #6
 8001a1e:	4a39      	ldr	r2, [pc, #228]	; (8001b04 <main+0x82c>)
 8001a20:	5cd2      	ldrb	r2, [r2, r3]
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <main+0x828>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	3b06      	subs	r3, #6
 8001a28:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8001a2c:	b2d1      	uxtb	r1, r2
 8001a2e:	4a35      	ldr	r2, [pc, #212]	; (8001b04 <main+0x82c>)
 8001a30:	54d1      	strb	r1, [r2, r3]

			  if (((walldata[current_cell+6] & BIT7)==0 ) && (current_cell != 0) && (current_cell != 1)
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <main+0x828>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	3306      	adds	r3, #6
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <main+0x82c>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db28      	blt.n	8001a94 <main+0x7bc>
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <main+0x828>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d024      	beq.n	8001a94 <main+0x7bc>
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <main+0x828>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d020      	beq.n	8001a94 <main+0x7bc>
					  && (current_cell != 2) && (current_cell != 3) && (current_cell != 4) && (current_cell != 5)
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <main+0x828>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d01c      	beq.n	8001a94 <main+0x7bc>
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <main+0x828>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d018      	beq.n	8001a94 <main+0x7bc>
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <main+0x828>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d014      	beq.n	8001a94 <main+0x7bc>
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <main+0x828>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d010      	beq.n	8001a94 <main+0x7bc>
					  && led_front==1 )
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <main+0x824>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10c      	bne.n	8001a94 <main+0x7bc>
				  walldata[current_cell+6]=((walldata[current_cell+6]) | (1<<7) | (1<<2));
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <main+0x828>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	3306      	adds	r3, #6
 8001a80:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <main+0x82c>)
 8001a82:	5cd2      	ldrb	r2, [r2, r3]
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <main+0x828>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	3306      	adds	r3, #6
 8001a8a:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8001a8e:	b2d1      	uxtb	r1, r2
 8001a90:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <main+0x82c>)
 8001a92:	54d1      	strb	r1, [r2, r3]

	      }
      flood_fill();
 8001a94:	f7ff fa26 	bl	8000ee4 <flood_fill>
	   //ford_ward();
	   //stop();
      next_direct=stepper();
 8001a98:	f7ff fb62 	bl	8001160 <stepper>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <main+0x83c>)
 8001aa2:	801a      	strh	r2, [r3, #0]
      if (next_direct == 2)
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <main+0x83c>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d111      	bne.n	8001ad0 <main+0x7f8>
      {
    	  turn_right();
 8001aac:	f7fe ffdc 	bl	8000a68 <turn_right>
    	  current_dir=current_dir*4;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <main+0x830>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <main+0x830>)
 8001aba:	701a      	strb	r2, [r3, #0]
    	  if (current_dir ==0) 	current_dir =1;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <main+0x830>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <main+0x7f2>
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <main+0x830>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
    	  ford_ward();
 8001aca:	f7ff f819 	bl	8000b00 <ford_ward>
 8001ace:	e04a      	b.n	8001b66 <main+0x88e>
      }
      else if(next_direct == 3)
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <main+0x83c>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d11f      	bne.n	8001b18 <main+0x840>
      {
    	  turn_left();
 8001ad8:	f7fe ffec 	bl	8000ab4 <turn_left>
    	  current_dir=current_dir/4;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <main+0x830>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <main+0x830>)
 8001ae6:	701a      	strb	r2, [r3, #0]
    	  if (current_dir == 0)
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <main+0x830>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <main+0x81e>
    		  current_dir =1;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <main+0x830>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
    	  ford_ward();
 8001af6:	f7ff f803 	bl	8000b00 <ford_ward>
 8001afa:	e034      	b.n	8001b66 <main+0x88e>
 8001afc:	20000106 	.word	0x20000106
 8001b00:	20000024 	.word	0x20000024
 8001b04:	200000e0 	.word	0x200000e0
 8001b08:	20000026 	.word	0x20000026
 8001b0c:	20000108 	.word	0x20000108
 8001b10:	20000104 	.word	0x20000104
 8001b14:	2000010a 	.word	0x2000010a
      }
      else if (next_direct == 4)// turn back 180 degrees
 8001b18:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <main+0x96c>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d120      	bne.n	8001b62 <main+0x88a>
      {
    	  turn_right(); // turn 1 time
 8001b20:	f7fe ffa2 	bl	8000a68 <turn_right>
    	  current_dir= current_dir *4;
 8001b24:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <main+0x970>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <main+0x970>)
 8001b2e:	701a      	strb	r2, [r3, #0]
    	  if (current_dir ==0) 	current_dir =1;
 8001b30:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <main+0x970>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <main+0x866>
 8001b38:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <main+0x970>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]

    	  turn_right(); // turn 2 times
 8001b3e:	f7fe ff93 	bl	8000a68 <turn_right>
    	  current_dir= current_dir *4;
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <main+0x970>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <main+0x970>)
 8001b4c:	701a      	strb	r2, [r3, #0]
    	  if (current_dir ==0) 	current_dir =1;
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <main+0x970>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <main+0x884>
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <main+0x970>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
    	  ford_ward();
 8001b5c:	f7fe ffd0 	bl	8000b00 <ford_ward>
 8001b60:	e001      	b.n	8001b66 <main+0x88e>
      }
      else
      ford_ward();
 8001b62:	f7fe ffcd 	bl	8000b00 <ford_ward>
      stop();
 8001b66:	f7fe fff1 	bl	8000b4c <stop>
      if (current_dir==1)current_cell=current_cell-6; //NORTH
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <main+0x970>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <main+0x8a6>
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <main+0x974>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	3b06      	subs	r3, #6
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <main+0x974>)
 8001b7c:	801a      	strh	r2, [r3, #0]
      if (current_dir==4)current_cell=current_cell+1;  // EAST
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <main+0x970>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d105      	bne.n	8001b92 <main+0x8ba>
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <main+0x974>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <main+0x974>)
 8001b90:	801a      	strh	r2, [r3, #0]
      if (current_dir==16)current_cell=current_cell+6; // SOUTH
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <main+0x970>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d105      	bne.n	8001ba6 <main+0x8ce>
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <main+0x974>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	3306      	adds	r3, #6
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <main+0x974>)
 8001ba4:	801a      	strh	r2, [r3, #0]
      if (current_dir==64)current_cell=current_cell-1; //WEST
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <main+0x970>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d105      	bne.n	8001bba <main+0x8e2>
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <main+0x974>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <main+0x974>)
 8001bb8:	801a      	strh	r2, [r3, #0]

      if (current_cell == destination) // when the car go to final -> make the car go out and pick up
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <main+0x974>)
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <main+0x978>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d132      	bne.n	8001c2c <main+0x954>
      {
    	  if (current_dir == 1)
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <main+0x970>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <main+0x8fc>
    		  ford_ward();
 8001bce:	f7fe ff97 	bl	8000b00 <ford_ward>
    		  current_dir *= 4;
        	  if (current_dir == 0)
        		  current_dir =1;
    		  ford_ward();
    	  }
    	  break;
 8001bd2:	e031      	b.n	8001c38 <main+0x960>
    	  else if (current_dir == 4)
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <main+0x970>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d111      	bne.n	8001c00 <main+0x928>
    		  turn_left();
 8001bdc:	f7fe ff6a 	bl	8000ab4 <turn_left>
    		  current_dir /= 4;
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <main+0x970>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <main+0x970>)
 8001bea:	701a      	strb	r2, [r3, #0]
        	  if (current_dir == 0)
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <main+0x970>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <main+0x922>
        		  current_dir =1;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <main+0x970>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
    		  ford_ward();
 8001bfa:	f7fe ff81 	bl	8000b00 <ford_ward>
    	  break;
 8001bfe:	e01b      	b.n	8001c38 <main+0x960>
    	  else if (current_dir == 64)
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <main+0x970>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b40      	cmp	r3, #64	; 0x40
 8001c06:	d117      	bne.n	8001c38 <main+0x960>
    		  turn_right();
 8001c08:	f7fe ff2e 	bl	8000a68 <turn_right>
    		  current_dir *= 4;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <main+0x970>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <main+0x970>)
 8001c16:	701a      	strb	r2, [r3, #0]
        	  if (current_dir == 0)
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <main+0x970>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <main+0x94e>
        		  current_dir =1;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <main+0x970>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
    		  ford_ward();
 8001c26:	f7fe ff6b 	bl	8000b00 <ford_ward>
    	  break;
 8001c2a:	e005      	b.n	8001c38 <main+0x960>
      }
    HAL_Delay(3000);
 8001c2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c30:	f000 fb14 	bl	800225c <HAL_Delay>
	  if (count==0)
 8001c34:	f7ff bbc3 	b.w	80013be <main+0xe6>
    	  break;
 8001c38:	bf00      	nop
 8001c3a:	2300      	movs	r3, #0
  }
    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000010a 	.word	0x2000010a
 8001c48:	20000026 	.word	0x20000026
 8001c4c:	20000024 	.word	0x20000024
 8001c50:	20000028 	.word	0x20000028

08001c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b090      	sub	sp, #64	; 0x40
 8001c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5a:	f107 0318 	add.w	r3, r7, #24
 8001c5e:	2228      	movs	r2, #40	; 0x28
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 ffb4 	bl	8003bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fd99 	bl	80027d4 <HAL_RCC_OscConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ca8:	f000 f98a 	bl	8001fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	230f      	movs	r3, #15
 8001cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 f806 	bl	8002cd8 <HAL_RCC_ClockConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cd2:	f000 f975 	bl	8001fc0 <Error_Handler>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3740      	adds	r7, #64	; 0x40
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <MX_TIM1_Init+0x9c>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d04:	2247      	movs	r2, #71	; 0x47
 8001d06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d28:	4813      	ldr	r0, [pc, #76]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d2a:	f001 f931 	bl	8002f90 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d34:	f000 f944 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	4619      	mov	r1, r3
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d46:	f001 fb79 	bl	800343c <HAL_TIM_ConfigClockSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d50:	f000 f936 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_TIM1_Init+0x98>)
 8001d62:	f001 fed7 	bl	8003b14 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d6c:	f000 f928 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000110 	.word	0x20000110
 8001d7c:	40012c00 	.word	0x40012c00

08001d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001dba:	2247      	movs	r2, #71	; 0x47
 8001dbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001dc6:	2264      	movs	r2, #100	; 0x64
 8001dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd6:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001dd8:	f001 f8da 	bl	8002f90 <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001de2:	f000 f8ed 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4822      	ldr	r0, [pc, #136]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001df4:	f001 fb22 	bl	800343c <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001dfe:	f000 f8df 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e02:	481e      	ldr	r0, [pc, #120]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001e04:	f001 f95e 	bl	80030c4 <HAL_TIM_PWM_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001e0e:	f000 f8d7 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e1a:	f107 0320 	add.w	r3, r7, #32
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4816      	ldr	r0, [pc, #88]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001e22:	f001 fe77 	bl	8003b14 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001e2c:	f000 f8c8 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e30:	2360      	movs	r3, #96	; 0x60
 8001e32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001e48:	f001 fa36 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001e52:	f000 f8b5 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001e5e:	f001 fa2b 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001e68:	f000 f8aa 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001e6e:	f000 f90f 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8001e72:	bf00      	nop
 8001e74:	3738      	adds	r7, #56	; 0x38
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000158 	.word	0x20000158

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a45      	ldr	r2, [pc, #276]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eac:	4b40      	ldr	r3, [pc, #256]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a3f      	ldr	r2, [pc, #252]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a39      	ldr	r2, [pc, #228]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a33      	ldr	r2, [pc, #204]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efa:	482e      	ldr	r0, [pc, #184]	; (8001fb4 <MX_GPIO_Init+0x134>)
 8001efc:	f000 fc51 	bl	80027a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <MX_GPIO_Init+0x138>)
 8001f08:	f000 fc4b 	bl	80027a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8001f12:	482a      	ldr	r0, [pc, #168]	; (8001fbc <MX_GPIO_Init+0x13c>)
 8001f14:	f000 fc45 	bl	80027a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4820      	ldr	r0, [pc, #128]	; (8001fb4 <MX_GPIO_Init+0x134>)
 8001f32:	f000 fa9b 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001f36:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	481a      	ldr	r0, [pc, #104]	; (8001fb8 <MX_GPIO_Init+0x138>)
 8001f50:	f000 fa8c 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8001f54:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8001f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	f107 0310 	add.w	r3, r7, #16
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4813      	ldr	r0, [pc, #76]	; (8001fbc <MX_GPIO_Init+0x13c>)
 8001f6e:	f000 fa7d 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f72:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <MX_GPIO_Init+0x13c>)
 8001f88:	f000 fa70 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_GPIO_Init+0x138>)
 8001fa2:	f000 fa63 	bl	800246c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40011000 	.word	0x40011000
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	40010c00 	.word	0x40010c00

08001fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <Error_Handler+0x8>
	...

08001fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_MspInit+0x5c>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <HAL_MspInit+0x5c>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6193      	str	r3, [r2, #24]
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_MspInit+0x5c>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_MspInit+0x5c>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <HAL_MspInit+0x5c>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_MspInit+0x5c>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_MspInit+0x60>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_MspInit+0x60>)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000

08002030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_TIM_Base_MspInit+0x58>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10c      	bne.n	800205c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_TIM_Base_MspInit+0x5c>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_TIM_Base_MspInit+0x5c>)
 8002048:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800204c:	6193      	str	r3, [r2, #24]
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_TIM_Base_MspInit+0x5c>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800205a:	e010      	b.n	800207e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d10b      	bne.n	800207e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_TIM_Base_MspInit+0x5c>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_TIM_Base_MspInit+0x5c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_TIM_Base_MspInit+0x5c>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d117      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_TIM_MspPostInit+0x58>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <HAL_TIM_MspPostInit+0x58>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_TIM_MspPostInit+0x58>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020c8:	2303      	movs	r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <HAL_TIM_MspPostInit+0x5c>)
 80020dc:	f000 f9c6 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010800 	.word	0x40010800

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002136:	f000 f875 	bl	8002224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}

0800213e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
	...

0800214c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800214c:	f7ff fff7 	bl	800213e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002152:	490c      	ldr	r1, [pc, #48]	; (8002184 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002154:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002168:	4c09      	ldr	r4, [pc, #36]	; (8002190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002176:	f001 fd39 	bl	8003bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800217a:	f7ff f8ad 	bl	80012d8 <main>
  bx lr
 800217e:	4770      	bx	lr
  ldr r0, =_sdata
 8002180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002184:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002188:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 800218c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002190:	200002dc 	.word	0x200002dc

08002194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC1_2_IRQHandler>
	...

08002198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_Init+0x28>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_Init+0x28>)
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 f92b 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ae:	200f      	movs	r0, #15
 80021b0:	f000 f808 	bl	80021c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b4:	f7ff ff0a 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x54>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_InitTick+0x58>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021da:	fbb3 f3f1 	udiv	r3, r3, r1
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f935 	bl	8002452 <HAL_SYSTICK_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00e      	b.n	8002210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0f      	cmp	r3, #15
 80021f6:	d80a      	bhi.n	800220e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f8:	2200      	movs	r2, #0
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f000 f90b 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002204:	4a06      	ldr	r2, [pc, #24]	; (8002220 <HAL_InitTick+0x5c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000002c 	.word	0x2000002c
 800221c:	20000034 	.word	0x20000034
 8002220:	20000030 	.word	0x20000030

08002224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_IncTick+0x1c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_IncTick+0x20>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a03      	ldr	r2, [pc, #12]	; (8002244 <HAL_IncTick+0x20>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000034 	.word	0x20000034
 8002244:	200001a0 	.word	0x200001a0

08002248 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b02      	ldr	r3, [pc, #8]	; (8002258 <HAL_GetTick+0x10>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	200001a0 	.word	0x200001a0

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff fff0 	bl	8002248 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffe0 	bl	8002248 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000034 	.word	0x20000034

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff90 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff49 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff5e 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff90 	bl	800235c <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5f 	bl	8002308 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffb0 	bl	80023c0 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b08b      	sub	sp, #44	; 0x2c
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e169      	b.n	8002754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002480:	2201      	movs	r2, #1
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8158 	bne.w	800274e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a9a      	ldr	r2, [pc, #616]	; (800270c <HAL_GPIO_Init+0x2a0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d05e      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024a8:	4a98      	ldr	r2, [pc, #608]	; (800270c <HAL_GPIO_Init+0x2a0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d875      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024ae:	4a98      	ldr	r2, [pc, #608]	; (8002710 <HAL_GPIO_Init+0x2a4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d058      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024b4:	4a96      	ldr	r2, [pc, #600]	; (8002710 <HAL_GPIO_Init+0x2a4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d86f      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024ba:	4a96      	ldr	r2, [pc, #600]	; (8002714 <HAL_GPIO_Init+0x2a8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d052      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024c0:	4a94      	ldr	r2, [pc, #592]	; (8002714 <HAL_GPIO_Init+0x2a8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d869      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024c6:	4a94      	ldr	r2, [pc, #592]	; (8002718 <HAL_GPIO_Init+0x2ac>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d04c      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024cc:	4a92      	ldr	r2, [pc, #584]	; (8002718 <HAL_GPIO_Init+0x2ac>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d863      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024d2:	4a92      	ldr	r2, [pc, #584]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d046      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024d8:	4a90      	ldr	r2, [pc, #576]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d85d      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d82a      	bhi.n	8002538 <HAL_GPIO_Init+0xcc>
 80024e2:	2b12      	cmp	r3, #18
 80024e4:	d859      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_GPIO_Init+0x80>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	08002567 	.word	0x08002567
 80024f0:	08002541 	.word	0x08002541
 80024f4:	08002553 	.word	0x08002553
 80024f8:	08002595 	.word	0x08002595
 80024fc:	0800259b 	.word	0x0800259b
 8002500:	0800259b 	.word	0x0800259b
 8002504:	0800259b 	.word	0x0800259b
 8002508:	0800259b 	.word	0x0800259b
 800250c:	0800259b 	.word	0x0800259b
 8002510:	0800259b 	.word	0x0800259b
 8002514:	0800259b 	.word	0x0800259b
 8002518:	0800259b 	.word	0x0800259b
 800251c:	0800259b 	.word	0x0800259b
 8002520:	0800259b 	.word	0x0800259b
 8002524:	0800259b 	.word	0x0800259b
 8002528:	0800259b 	.word	0x0800259b
 800252c:	0800259b 	.word	0x0800259b
 8002530:	08002549 	.word	0x08002549
 8002534:	0800255d 	.word	0x0800255d
 8002538:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_GPIO_Init+0x2b4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800253e:	e02c      	b.n	800259a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	623b      	str	r3, [r7, #32]
          break;
 8002546:	e029      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	3304      	adds	r3, #4
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e024      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	3308      	adds	r3, #8
 8002558:	623b      	str	r3, [r7, #32]
          break;
 800255a:	e01f      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	330c      	adds	r3, #12
 8002562:	623b      	str	r3, [r7, #32]
          break;
 8002564:	e01a      	b.n	800259c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800256e:	2304      	movs	r3, #4
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e013      	b.n	800259c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800257c:	2308      	movs	r3, #8
 800257e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	611a      	str	r2, [r3, #16]
          break;
 8002586:	e009      	b.n	800259c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002588:	2308      	movs	r3, #8
 800258a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	615a      	str	r2, [r3, #20]
          break;
 8002592:	e003      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
          break;
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x130>
          break;
 800259a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d801      	bhi.n	80025a6 <HAL_GPIO_Init+0x13a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_Init+0x13e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2bff      	cmp	r3, #255	; 0xff
 80025b0:	d802      	bhi.n	80025b8 <HAL_GPIO_Init+0x14c>
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x152>
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	3b08      	subs	r3, #8
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	210f      	movs	r1, #15
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	6a39      	ldr	r1, [r7, #32]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	431a      	orrs	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80b1 	beq.w	800274e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ec:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_GPIO_Init+0x2bc>)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_GPIO_Init+0x2c0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_GPIO_Init+0x1ec>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3f      	ldr	r2, [pc, #252]	; (8002730 <HAL_GPIO_Init+0x2c4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00d      	beq.n	8002654 <HAL_GPIO_Init+0x1e8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3e      	ldr	r2, [pc, #248]	; (8002734 <HAL_GPIO_Init+0x2c8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <HAL_GPIO_Init+0x1e4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3d      	ldr	r2, [pc, #244]	; (8002738 <HAL_GPIO_Init+0x2cc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_GPIO_Init+0x1e0>
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 800264c:	2304      	movs	r3, #4
 800264e:	e004      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002650:	2302      	movs	r3, #2
 8002652:	e002      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002658:	2300      	movs	r3, #0
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	f002 0203 	and.w	r2, r2, #3
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	4093      	lsls	r3, r2
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800266a:	492f      	ldr	r1, [pc, #188]	; (8002728 <HAL_GPIO_Init+0x2bc>)
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	492c      	ldr	r1, [pc, #176]	; (800273c <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	43db      	mvns	r3, r3
 800269a:	4928      	ldr	r1, [pc, #160]	; (800273c <HAL_GPIO_Init+0x2d0>)
 800269c:	4013      	ands	r3, r2
 800269e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	4922      	ldr	r1, [pc, #136]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	491e      	ldr	r1, [pc, #120]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4914      	ldr	r1, [pc, #80]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d021      	beq.n	8002740 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e021      	b.n	800274e <HAL_GPIO_Init+0x2e2>
 800270a:	bf00      	nop
 800270c:	10320000 	.word	0x10320000
 8002710:	10310000 	.word	0x10310000
 8002714:	10220000 	.word	0x10220000
 8002718:	10210000 	.word	0x10210000
 800271c:	10120000 	.word	0x10120000
 8002720:	10110000 	.word	0x10110000
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00
 8002734:	40011000 	.word	0x40011000
 8002738:	40011400 	.word	0x40011400
 800273c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	43db      	mvns	r3, r3
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <HAL_GPIO_Init+0x304>)
 800274a:	4013      	ands	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	f47f ae8e 	bne.w	8002480 <HAL_GPIO_Init+0x14>
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	372c      	adds	r7, #44	; 0x2c
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e001      	b.n	8002796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	807b      	strh	r3, [r7, #2]
 80027ae:	4613      	mov	r3, r2
 80027b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b2:	787b      	ldrb	r3, [r7, #1]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b8:	887a      	ldrh	r2, [r7, #2]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027be:	e003      	b.n	80027c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	611a      	str	r2, [r3, #16]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e272      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8087 	beq.w	8002902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f4:	4b92      	ldr	r3, [pc, #584]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d00c      	beq.n	800281a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002800:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d112      	bne.n	8002832 <HAL_RCC_OscConfig+0x5e>
 800280c:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d10b      	bne.n	8002832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d06c      	beq.n	8002900 <HAL_RCC_OscConfig+0x12c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d168      	bne.n	8002900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e24c      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x76>
 800283c:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7f      	ldr	r2, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e02e      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7a      	ldr	r2, [pc, #488]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a77      	ldr	r2, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0xbc>
 8002876:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 8002890:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a67      	ldr	r2, [pc, #412]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fcca 	bl	8002248 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff fcc6 	bl	8002248 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e200      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe4>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fcb6 	bl	8002248 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff fcb2 	bl	8002248 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1ec      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x10c>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x18c>
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x176>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1c0      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4939      	ldr	r1, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x270>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff fc6b 	bl	8002248 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff fc67 	bl	8002248 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1a1      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4927      	ldr	r1, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_RCC_OscConfig+0x270>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fc4a 	bl	8002248 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7ff fc46 	bl	8002248 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e180      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03a      	beq.n	8002a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d019      	beq.n	8002a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_RCC_OscConfig+0x274>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f0:	f7ff fc2a 	bl	8002248 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff fc26 	bl	8002248 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e160      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f000 fa9c 	bl	8002f54 <RCC_Delay>
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7ff fc10 	bl	8002248 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2a:	e00f      	b.n	8002a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fc0c 	bl	8002248 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d908      	bls.n	8002a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e146      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	42420000 	.word	0x42420000
 8002a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e9      	bne.n	8002a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a6 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a87      	ldr	r2, [pc, #540]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff fbcd 	bl	8002248 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7ff fbc9 	bl	8002248 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e103      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b75      	ldr	r3, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x312>
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	e02d      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x334>
 8002aee:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a69      	ldr	r2, [pc, #420]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	e01c      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x356>
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6213      	str	r3, [r2, #32]
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e00b      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d015      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fb7d 	bl	8002248 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7ff fb79 	bl	8002248 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0b1      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ee      	beq.n	8002b52 <HAL_RCC_OscConfig+0x37e>
 8002b74:	e014      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7ff fb67 	bl	8002248 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7ff fb63 	bl	8002248 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e09b      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ee      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a3b      	ldr	r2, [pc, #236]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d061      	beq.n	8002c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d146      	bne.n	8002c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7ff fb37 	bl	8002248 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7ff fb33 	bl	8002248 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e06d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d108      	bne.n	8002c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4921      	ldr	r1, [pc, #132]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c18:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a19      	ldr	r1, [r3, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	491b      	ldr	r1, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7ff fb07 	bl	8002248 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7ff fb03 	bl	8002248 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x46a>
 8002c5c:	e035      	b.n	8002cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff faf0 	bl	8002248 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff faec 	bl	8002248 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e026      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x498>
 8002c8a:	e01e      	b.n	8002cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e019      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x500>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d0      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d910      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4965      	ldr	r1, [pc, #404]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d040      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d115      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e073      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06b      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4936      	ldr	r1, [pc, #216]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7ff fa3e 	bl	8002248 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7ff fa3a 	bl	8002248 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e053      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 020c 	and.w	r2, r3, #12
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1eb      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d210      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	4922      	ldr	r1, [pc, #136]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f99c 	bl	80021c4 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08004a68 	.word	0x08004a68
 8002ea4:	2000002c 	.word	0x2000002c
 8002ea8:	20000030 	.word	0x20000030

08002eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x30>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eda:	e027      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ede:	613b      	str	r3, [r7, #16]
      break;
 8002ee0:	e027      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0c5b      	lsrs	r3, r3, #17
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0e:	fb03 f202 	mul.w	r2, r3, r2
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e004      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	613b      	str	r3, [r7, #16]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2e:	613b      	str	r3, [r7, #16]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	693b      	ldr	r3, [r7, #16]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	007a1200 	.word	0x007a1200
 8002f48:	08004a78 	.word	0x08004a78
 8002f4c:	08004a88 	.word	0x08004a88
 8002f50:	003d0900 	.word	0x003d0900

08002f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <RCC_Delay+0x34>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <RCC_Delay+0x38>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0a5b      	lsrs	r3, r3, #9
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f70:	bf00      	nop
  }
  while (Delay --);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	60fa      	str	r2, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <RCC_Delay+0x1c>
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	2000002c 	.word	0x2000002c
 8002f8c:	10624dd3 	.word	0x10624dd3

08002f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e041      	b.n	8003026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff f83a 	bl	8002030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f000 fafc 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e032      	b.n	80030ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_TIM_Base_Start+0x88>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00e      	beq.n	8003078 <HAL_TIM_Base_Start+0x48>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003062:	d009      	beq.n	8003078 <HAL_TIM_Base_Start+0x48>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a14      	ldr	r2, [pc, #80]	; (80030bc <HAL_TIM_Base_Start+0x8c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_TIM_Base_Start+0x48>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_TIM_Base_Start+0x90>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b06      	cmp	r3, #6
 8003088:	d010      	beq.n	80030ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	e007      	b.n	80030ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800

080030c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e041      	b.n	800315a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f839 	bl	8003162 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 fa62 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d109      	bne.n	8003198 <HAL_TIM_PWM_Start+0x24>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e022      	b.n	80031de <HAL_TIM_PWM_Start+0x6a>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b04      	cmp	r3, #4
 800319c:	d109      	bne.n	80031b2 <HAL_TIM_PWM_Start+0x3e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	e015      	b.n	80031de <HAL_TIM_PWM_Start+0x6a>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d109      	bne.n	80031cc <HAL_TIM_PWM_Start+0x58>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e008      	b.n	80031de <HAL_TIM_PWM_Start+0x6a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e05e      	b.n	80032a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0x82>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f4:	e013      	b.n	800321e <HAL_TIM_PWM_Start+0xaa>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_PWM_Start+0x92>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	e00b      	b.n	800321e <HAL_TIM_PWM_Start+0xaa>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start+0xa2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003214:	e003      	b.n	800321e <HAL_TIM_PWM_Start+0xaa>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fc50 	bl	8003acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_TIM_PWM_Start+0x138>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d107      	bne.n	8003246 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_TIM_PWM_Start+0x138>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIM_PWM_Start+0xfa>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d009      	beq.n	800326e <HAL_TIM_PWM_Start+0xfa>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <HAL_TIM_PWM_Start+0x13c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIM_PWM_Start+0xfa>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <HAL_TIM_PWM_Start+0x140>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d111      	bne.n	8003292 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b06      	cmp	r3, #6
 800327e:	d010      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	e007      	b.n	80032a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800

080032b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0ae      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	f200 809f 	bhi.w	8003424 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032e6:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003321 	.word	0x08003321
 80032f0:	08003425 	.word	0x08003425
 80032f4:	08003425 	.word	0x08003425
 80032f8:	08003425 	.word	0x08003425
 80032fc:	08003361 	.word	0x08003361
 8003300:	08003425 	.word	0x08003425
 8003304:	08003425 	.word	0x08003425
 8003308:	08003425 	.word	0x08003425
 800330c:	080033a3 	.word	0x080033a3
 8003310:	08003425 	.word	0x08003425
 8003314:	08003425 	.word	0x08003425
 8003318:	08003425 	.word	0x08003425
 800331c:	080033e3 	.word	0x080033e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f9b2 	bl	8003690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0208 	orr.w	r2, r2, #8
 800333a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6999      	ldr	r1, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	619a      	str	r2, [r3, #24]
      break;
 800335e:	e064      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f9f8 	bl	800375c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	619a      	str	r2, [r3, #24]
      break;
 80033a0:	e043      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fa41 	bl	8003830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0208 	orr.w	r2, r2, #8
 80033bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0204 	bic.w	r2, r2, #4
 80033cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69d9      	ldr	r1, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	61da      	str	r2, [r3, #28]
      break;
 80033e0:	e023      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fa8b 	bl	8003904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69d9      	ldr	r1, [r3, #28]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	61da      	str	r2, [r3, #28]
      break;
 8003422:	e002      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
      break;
 8003428:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIM_ConfigClockSource+0x1c>
 8003454:	2302      	movs	r3, #2
 8003456:	e0b4      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x186>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800347e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003490:	d03e      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0xd4>
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003496:	f200 8087 	bhi.w	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	f000 8086 	beq.w	80035ae <HAL_TIM_ConfigClockSource+0x172>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a6:	d87f      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b70      	cmp	r3, #112	; 0x70
 80034aa:	d01a      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0xa6>
 80034ac:	2b70      	cmp	r3, #112	; 0x70
 80034ae:	d87b      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b60      	cmp	r3, #96	; 0x60
 80034b2:	d050      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x11a>
 80034b4:	2b60      	cmp	r3, #96	; 0x60
 80034b6:	d877      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b50      	cmp	r3, #80	; 0x50
 80034ba:	d03c      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0xfa>
 80034bc:	2b50      	cmp	r3, #80	; 0x50
 80034be:	d873      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d058      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x13a>
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d86f      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b30      	cmp	r3, #48	; 0x30
 80034ca:	d064      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	2b30      	cmp	r3, #48	; 0x30
 80034ce:	d86b      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d060      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d867      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05c      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d05a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034e0:	e062      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f2:	f000 facc 	bl	8003a8e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	609a      	str	r2, [r3, #8]
      break;
 800350e:	e04f      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	f000 fab5 	bl	8003a8e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003532:	609a      	str	r2, [r3, #8]
      break;
 8003534:	e03c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	461a      	mov	r2, r3
 8003544:	f000 fa2c 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2150      	movs	r1, #80	; 0x50
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fa83 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 8003554:	e02c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	461a      	mov	r2, r3
 8003564:	f000 fa4a 	bl	80039fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2160      	movs	r1, #96	; 0x60
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fa73 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 8003574:	e01c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	461a      	mov	r2, r3
 8003584:	f000 fa0c 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fa63 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 8003594:	e00c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f000 fa5a 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 80035a6:	e003      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e000      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a29      	ldr	r2, [pc, #164]	; (8003684 <TIM_Base_SetConfig+0xb8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0x30>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0x30>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <TIM_Base_SetConfig+0xbc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0x30>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <TIM_Base_SetConfig+0xc0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <TIM_Base_SetConfig+0xb8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0x62>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <TIM_Base_SetConfig+0xbc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0x62>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a18      	ldr	r2, [pc, #96]	; (800368c <TIM_Base_SetConfig+0xc0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <TIM_Base_SetConfig+0xb8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800

08003690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f023 0201 	bic.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 0302 	bic.w	r3, r3, #2
 80036d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <TIM_OC1_SetConfig+0xc8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0308 	bic.w	r3, r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a13      	ldr	r2, [pc, #76]	; (8003758 <TIM_OC1_SetConfig+0xc8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d111      	bne.n	8003732 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	621a      	str	r2, [r3, #32]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40012c00 	.word	0x40012c00

0800375c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f023 0210 	bic.w	r2, r3, #16
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0320 	bic.w	r3, r3, #32
 80037a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	; (800382c <TIM_OC2_SetConfig+0xd0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10d      	bne.n	80037d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a14      	ldr	r2, [pc, #80]	; (800382c <TIM_OC2_SetConfig+0xd0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d113      	bne.n	8003808 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40012c00 	.word	0x40012c00

08003830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <TIM_OC3_SetConfig+0xd0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10d      	bne.n	80038aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <TIM_OC3_SetConfig+0xd0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d113      	bne.n	80038da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	621a      	str	r2, [r3, #32]
}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40012c00 	.word	0x40012c00

08003904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800394e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	031b      	lsls	r3, r3, #12
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0f      	ldr	r2, [pc, #60]	; (800399c <TIM_OC4_SetConfig+0x98>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d109      	bne.n	8003978 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800396a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	40012c00 	.word	0x40012c00

080039a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0201 	bic.w	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 030a 	bic.w	r3, r3, #10
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	031b      	lsls	r3, r3, #12
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f043 0307 	orr.w	r3, r3, #7
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr

08003a8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b087      	sub	sp, #28
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	021a      	lsls	r2, r3, #8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	609a      	str	r2, [r3, #8]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2201      	movs	r2, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	401a      	ands	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e046      	b.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b78:	d009      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800

08003bd0 <memset>:
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4402      	add	r2, r0
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d100      	bne.n	8003bda <memset+0xa>
 8003bd8:	4770      	bx	lr
 8003bda:	f803 1b01 	strb.w	r1, [r3], #1
 8003bde:	e7f9      	b.n	8003bd4 <memset+0x4>

08003be0 <__errno>:
 8003be0:	4b01      	ldr	r3, [pc, #4]	; (8003be8 <__errno+0x8>)
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000084 	.word	0x20000084

08003bec <__libc_init_array>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	2600      	movs	r6, #0
 8003bf0:	4d0c      	ldr	r5, [pc, #48]	; (8003c24 <__libc_init_array+0x38>)
 8003bf2:	4c0d      	ldr	r4, [pc, #52]	; (8003c28 <__libc_init_array+0x3c>)
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	42a6      	cmp	r6, r4
 8003bfa:	d109      	bne.n	8003c10 <__libc_init_array+0x24>
 8003bfc:	f000 ff22 	bl	8004a44 <_init>
 8003c00:	2600      	movs	r6, #0
 8003c02:	4d0a      	ldr	r5, [pc, #40]	; (8003c2c <__libc_init_array+0x40>)
 8003c04:	4c0a      	ldr	r4, [pc, #40]	; (8003c30 <__libc_init_array+0x44>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	42a6      	cmp	r6, r4
 8003c0c:	d105      	bne.n	8003c1a <__libc_init_array+0x2e>
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c14:	4798      	blx	r3
 8003c16:	3601      	adds	r6, #1
 8003c18:	e7ee      	b.n	8003bf8 <__libc_init_array+0xc>
 8003c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1e:	4798      	blx	r3
 8003c20:	3601      	adds	r6, #1
 8003c22:	e7f2      	b.n	8003c0a <__libc_init_array+0x1e>
 8003c24:	08004ac0 	.word	0x08004ac0
 8003c28:	08004ac0 	.word	0x08004ac0
 8003c2c:	08004ac0 	.word	0x08004ac0
 8003c30:	08004ac4 	.word	0x08004ac4

08003c34 <pow>:
 8003c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4680      	mov	r8, r0
 8003c3e:	4689      	mov	r9, r1
 8003c40:	f000 f866 	bl	8003d10 <__ieee754_pow>
 8003c44:	4622      	mov	r2, r4
 8003c46:	4606      	mov	r6, r0
 8003c48:	460f      	mov	r7, r1
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f7fc fed4 	bl	80009fc <__aeabi_dcmpun>
 8003c54:	bbc8      	cbnz	r0, 8003cca <pow+0x96>
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	f7fc fe9b 	bl	8000998 <__aeabi_dcmpeq>
 8003c62:	b1b8      	cbz	r0, 8003c94 <pow+0x60>
 8003c64:	2200      	movs	r2, #0
 8003c66:	2300      	movs	r3, #0
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fe94 	bl	8000998 <__aeabi_dcmpeq>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d141      	bne.n	8003cf8 <pow+0xc4>
 8003c74:	4620      	mov	r0, r4
 8003c76:	4629      	mov	r1, r5
 8003c78:	f000 f844 	bl	8003d04 <finite>
 8003c7c:	b328      	cbz	r0, 8003cca <pow+0x96>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2300      	movs	r3, #0
 8003c82:	4620      	mov	r0, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	f7fc fe91 	bl	80009ac <__aeabi_dcmplt>
 8003c8a:	b1f0      	cbz	r0, 8003cca <pow+0x96>
 8003c8c:	f7ff ffa8 	bl	8003be0 <__errno>
 8003c90:	2322      	movs	r3, #34	; 0x22
 8003c92:	e019      	b.n	8003cc8 <pow+0x94>
 8003c94:	4630      	mov	r0, r6
 8003c96:	4639      	mov	r1, r7
 8003c98:	f000 f834 	bl	8003d04 <finite>
 8003c9c:	b9c8      	cbnz	r0, 8003cd2 <pow+0x9e>
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	f000 f82f 	bl	8003d04 <finite>
 8003ca6:	b1a0      	cbz	r0, 8003cd2 <pow+0x9e>
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4629      	mov	r1, r5
 8003cac:	f000 f82a 	bl	8003d04 <finite>
 8003cb0:	b178      	cbz	r0, 8003cd2 <pow+0x9e>
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	4639      	mov	r1, r7
 8003cba:	f7fc fe9f 	bl	80009fc <__aeabi_dcmpun>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d0e4      	beq.n	8003c8c <pow+0x58>
 8003cc2:	f7ff ff8d 	bl	8003be0 <__errno>
 8003cc6:	2321      	movs	r3, #33	; 0x21
 8003cc8:	6003      	str	r3, [r0, #0]
 8003cca:	4630      	mov	r0, r6
 8003ccc:	4639      	mov	r1, r7
 8003cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	4639      	mov	r1, r7
 8003cda:	f7fc fe5d 	bl	8000998 <__aeabi_dcmpeq>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d0f3      	beq.n	8003cca <pow+0x96>
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f000 f80d 	bl	8003d04 <finite>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d0ed      	beq.n	8003cca <pow+0x96>
 8003cee:	4620      	mov	r0, r4
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	f000 f807 	bl	8003d04 <finite>
 8003cf6:	e7c8      	b.n	8003c8a <pow+0x56>
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	4f01      	ldr	r7, [pc, #4]	; (8003d00 <pow+0xcc>)
 8003cfc:	e7e5      	b.n	8003cca <pow+0x96>
 8003cfe:	bf00      	nop
 8003d00:	3ff00000 	.word	0x3ff00000

08003d04 <finite>:
 8003d04:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003d08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003d0c:	0fc0      	lsrs	r0, r0, #31
 8003d0e:	4770      	bx	lr

08003d10 <__ieee754_pow>:
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	b093      	sub	sp, #76	; 0x4c
 8003d16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d1a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003d1e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003d22:	4689      	mov	r9, r1
 8003d24:	ea56 0102 	orrs.w	r1, r6, r2
 8003d28:	4680      	mov	r8, r0
 8003d2a:	d111      	bne.n	8003d50 <__ieee754_pow+0x40>
 8003d2c:	1803      	adds	r3, r0, r0
 8003d2e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003d32:	4152      	adcs	r2, r2
 8003d34:	4299      	cmp	r1, r3
 8003d36:	4b82      	ldr	r3, [pc, #520]	; (8003f40 <__ieee754_pow+0x230>)
 8003d38:	4193      	sbcs	r3, r2
 8003d3a:	f080 84ba 	bcs.w	80046b2 <__ieee754_pow+0x9a2>
 8003d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d42:	4640      	mov	r0, r8
 8003d44:	4649      	mov	r1, r9
 8003d46:	f7fc fa09 	bl	800015c <__adddf3>
 8003d4a:	4683      	mov	fp, r0
 8003d4c:	468c      	mov	ip, r1
 8003d4e:	e06f      	b.n	8003e30 <__ieee754_pow+0x120>
 8003d50:	4b7c      	ldr	r3, [pc, #496]	; (8003f44 <__ieee754_pow+0x234>)
 8003d52:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003d56:	429c      	cmp	r4, r3
 8003d58:	464d      	mov	r5, r9
 8003d5a:	4682      	mov	sl, r0
 8003d5c:	dc06      	bgt.n	8003d6c <__ieee754_pow+0x5c>
 8003d5e:	d101      	bne.n	8003d64 <__ieee754_pow+0x54>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d1ec      	bne.n	8003d3e <__ieee754_pow+0x2e>
 8003d64:	429e      	cmp	r6, r3
 8003d66:	dc01      	bgt.n	8003d6c <__ieee754_pow+0x5c>
 8003d68:	d10f      	bne.n	8003d8a <__ieee754_pow+0x7a>
 8003d6a:	b172      	cbz	r2, 8003d8a <__ieee754_pow+0x7a>
 8003d6c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003d70:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003d74:	ea55 050a 	orrs.w	r5, r5, sl
 8003d78:	d1e1      	bne.n	8003d3e <__ieee754_pow+0x2e>
 8003d7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003d7e:	18db      	adds	r3, r3, r3
 8003d80:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003d84:	4152      	adcs	r2, r2
 8003d86:	429d      	cmp	r5, r3
 8003d88:	e7d5      	b.n	8003d36 <__ieee754_pow+0x26>
 8003d8a:	2d00      	cmp	r5, #0
 8003d8c:	da39      	bge.n	8003e02 <__ieee754_pow+0xf2>
 8003d8e:	4b6e      	ldr	r3, [pc, #440]	; (8003f48 <__ieee754_pow+0x238>)
 8003d90:	429e      	cmp	r6, r3
 8003d92:	dc52      	bgt.n	8003e3a <__ieee754_pow+0x12a>
 8003d94:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003d98:	429e      	cmp	r6, r3
 8003d9a:	f340 849d 	ble.w	80046d8 <__ieee754_pow+0x9c8>
 8003d9e:	1533      	asrs	r3, r6, #20
 8003da0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003da4:	2b14      	cmp	r3, #20
 8003da6:	dd0f      	ble.n	8003dc8 <__ieee754_pow+0xb8>
 8003da8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003dac:	fa22 f103 	lsr.w	r1, r2, r3
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	4293      	cmp	r3, r2
 8003db6:	f040 848f 	bne.w	80046d8 <__ieee754_pow+0x9c8>
 8003dba:	f001 0101 	and.w	r1, r1, #1
 8003dbe:	f1c1 0302 	rsb	r3, r1, #2
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	b182      	cbz	r2, 8003de8 <__ieee754_pow+0xd8>
 8003dc6:	e05d      	b.n	8003e84 <__ieee754_pow+0x174>
 8003dc8:	2a00      	cmp	r2, #0
 8003dca:	d159      	bne.n	8003e80 <__ieee754_pow+0x170>
 8003dcc:	f1c3 0314 	rsb	r3, r3, #20
 8003dd0:	fa46 f103 	asr.w	r1, r6, r3
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	42b3      	cmp	r3, r6
 8003dda:	f040 847a 	bne.w	80046d2 <__ieee754_pow+0x9c2>
 8003dde:	f001 0101 	and.w	r1, r1, #1
 8003de2:	f1c1 0302 	rsb	r3, r1, #2
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4b58      	ldr	r3, [pc, #352]	; (8003f4c <__ieee754_pow+0x23c>)
 8003dea:	429e      	cmp	r6, r3
 8003dec:	d132      	bne.n	8003e54 <__ieee754_pow+0x144>
 8003dee:	2f00      	cmp	r7, #0
 8003df0:	f280 846b 	bge.w	80046ca <__ieee754_pow+0x9ba>
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	2000      	movs	r0, #0
 8003dfa:	4954      	ldr	r1, [pc, #336]	; (8003f4c <__ieee754_pow+0x23c>)
 8003dfc:	f7fc fc8e 	bl	800071c <__aeabi_ddiv>
 8003e00:	e7a3      	b.n	8003d4a <__ieee754_pow+0x3a>
 8003e02:	2300      	movs	r3, #0
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d13c      	bne.n	8003e84 <__ieee754_pow+0x174>
 8003e0a:	4b4e      	ldr	r3, [pc, #312]	; (8003f44 <__ieee754_pow+0x234>)
 8003e0c:	429e      	cmp	r6, r3
 8003e0e:	d1eb      	bne.n	8003de8 <__ieee754_pow+0xd8>
 8003e10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003e14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003e18:	ea53 030a 	orrs.w	r3, r3, sl
 8003e1c:	f000 8449 	beq.w	80046b2 <__ieee754_pow+0x9a2>
 8003e20:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <__ieee754_pow+0x240>)
 8003e22:	429c      	cmp	r4, r3
 8003e24:	dd0b      	ble.n	8003e3e <__ieee754_pow+0x12e>
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	f2c0 8449 	blt.w	80046be <__ieee754_pow+0x9ae>
 8003e2c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003e30:	4658      	mov	r0, fp
 8003e32:	4661      	mov	r1, ip
 8003e34:	b013      	add	sp, #76	; 0x4c
 8003e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e7e2      	b.n	8003e04 <__ieee754_pow+0xf4>
 8003e3e:	2f00      	cmp	r7, #0
 8003e40:	f04f 0b00 	mov.w	fp, #0
 8003e44:	f04f 0c00 	mov.w	ip, #0
 8003e48:	daf2      	bge.n	8003e30 <__ieee754_pow+0x120>
 8003e4a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003e4e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003e52:	e7ed      	b.n	8003e30 <__ieee754_pow+0x120>
 8003e54:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003e58:	d106      	bne.n	8003e68 <__ieee754_pow+0x158>
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	4640      	mov	r0, r8
 8003e60:	4649      	mov	r1, r9
 8003e62:	f7fc fb31 	bl	80004c8 <__aeabi_dmul>
 8003e66:	e770      	b.n	8003d4a <__ieee754_pow+0x3a>
 8003e68:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <__ieee754_pow+0x244>)
 8003e6a:	429f      	cmp	r7, r3
 8003e6c:	d10a      	bne.n	8003e84 <__ieee754_pow+0x174>
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	db08      	blt.n	8003e84 <__ieee754_pow+0x174>
 8003e72:	4640      	mov	r0, r8
 8003e74:	4649      	mov	r1, r9
 8003e76:	b013      	add	sp, #76	; 0x4c
 8003e78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	f000 bd0a 	b.w	8004894 <__ieee754_sqrt>
 8003e80:	2300      	movs	r3, #0
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4640      	mov	r0, r8
 8003e86:	4649      	mov	r1, r9
 8003e88:	f000 fc58 	bl	800473c <fabs>
 8003e8c:	4683      	mov	fp, r0
 8003e8e:	468c      	mov	ip, r1
 8003e90:	f1ba 0f00 	cmp.w	sl, #0
 8003e94:	d128      	bne.n	8003ee8 <__ieee754_pow+0x1d8>
 8003e96:	b124      	cbz	r4, 8003ea2 <__ieee754_pow+0x192>
 8003e98:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <__ieee754_pow+0x23c>)
 8003e9a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d122      	bne.n	8003ee8 <__ieee754_pow+0x1d8>
 8003ea2:	2f00      	cmp	r7, #0
 8003ea4:	da07      	bge.n	8003eb6 <__ieee754_pow+0x1a6>
 8003ea6:	465a      	mov	r2, fp
 8003ea8:	4663      	mov	r3, ip
 8003eaa:	2000      	movs	r0, #0
 8003eac:	4927      	ldr	r1, [pc, #156]	; (8003f4c <__ieee754_pow+0x23c>)
 8003eae:	f7fc fc35 	bl	800071c <__aeabi_ddiv>
 8003eb2:	4683      	mov	fp, r0
 8003eb4:	468c      	mov	ip, r1
 8003eb6:	2d00      	cmp	r5, #0
 8003eb8:	daba      	bge.n	8003e30 <__ieee754_pow+0x120>
 8003eba:	9b00      	ldr	r3, [sp, #0]
 8003ebc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ec0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ec4:	431c      	orrs	r4, r3
 8003ec6:	d108      	bne.n	8003eda <__ieee754_pow+0x1ca>
 8003ec8:	465a      	mov	r2, fp
 8003eca:	4663      	mov	r3, ip
 8003ecc:	4658      	mov	r0, fp
 8003ece:	4661      	mov	r1, ip
 8003ed0:	f7fc f942 	bl	8000158 <__aeabi_dsub>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	e790      	b.n	8003dfc <__ieee754_pow+0xec>
 8003eda:	9b00      	ldr	r3, [sp, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d1a7      	bne.n	8003e30 <__ieee754_pow+0x120>
 8003ee0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003ee4:	469c      	mov	ip, r3
 8003ee6:	e7a3      	b.n	8003e30 <__ieee754_pow+0x120>
 8003ee8:	0feb      	lsrs	r3, r5, #31
 8003eea:	3b01      	subs	r3, #1
 8003eec:	930c      	str	r3, [sp, #48]	; 0x30
 8003eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ef0:	9b00      	ldr	r3, [sp, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	d104      	bne.n	8003f00 <__ieee754_pow+0x1f0>
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	4640      	mov	r0, r8
 8003efc:	4649      	mov	r1, r9
 8003efe:	e7e7      	b.n	8003ed0 <__ieee754_pow+0x1c0>
 8003f00:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <__ieee754_pow+0x248>)
 8003f02:	429e      	cmp	r6, r3
 8003f04:	f340 80f6 	ble.w	80040f4 <__ieee754_pow+0x3e4>
 8003f08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003f0c:	429e      	cmp	r6, r3
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <__ieee754_pow+0x240>)
 8003f10:	dd09      	ble.n	8003f26 <__ieee754_pow+0x216>
 8003f12:	429c      	cmp	r4, r3
 8003f14:	dc0c      	bgt.n	8003f30 <__ieee754_pow+0x220>
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	da0c      	bge.n	8003f34 <__ieee754_pow+0x224>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	b013      	add	sp, #76	; 0x4c
 8003f1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f22:	f000 bcb2 	b.w	800488a <__math_oflow>
 8003f26:	429c      	cmp	r4, r3
 8003f28:	dbf5      	blt.n	8003f16 <__ieee754_pow+0x206>
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <__ieee754_pow+0x23c>)
 8003f2c:	429c      	cmp	r4, r3
 8003f2e:	dd15      	ble.n	8003f5c <__ieee754_pow+0x24c>
 8003f30:	2f00      	cmp	r7, #0
 8003f32:	dcf2      	bgt.n	8003f1a <__ieee754_pow+0x20a>
 8003f34:	2000      	movs	r0, #0
 8003f36:	b013      	add	sp, #76	; 0x4c
 8003f38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	f000 bca0 	b.w	8004880 <__math_uflow>
 8003f40:	fff00000 	.word	0xfff00000
 8003f44:	7ff00000 	.word	0x7ff00000
 8003f48:	433fffff 	.word	0x433fffff
 8003f4c:	3ff00000 	.word	0x3ff00000
 8003f50:	3fefffff 	.word	0x3fefffff
 8003f54:	3fe00000 	.word	0x3fe00000
 8003f58:	41e00000 	.word	0x41e00000
 8003f5c:	4661      	mov	r1, ip
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4658      	mov	r0, fp
 8003f62:	4b5f      	ldr	r3, [pc, #380]	; (80040e0 <__ieee754_pow+0x3d0>)
 8003f64:	f7fc f8f8 	bl	8000158 <__aeabi_dsub>
 8003f68:	a355      	add	r3, pc, #340	; (adr r3, 80040c0 <__ieee754_pow+0x3b0>)
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	4604      	mov	r4, r0
 8003f70:	460d      	mov	r5, r1
 8003f72:	f7fc faa9 	bl	80004c8 <__aeabi_dmul>
 8003f76:	a354      	add	r3, pc, #336	; (adr r3, 80040c8 <__ieee754_pow+0x3b8>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	4606      	mov	r6, r0
 8003f7e:	460f      	mov	r7, r1
 8003f80:	4620      	mov	r0, r4
 8003f82:	4629      	mov	r1, r5
 8003f84:	f7fc faa0 	bl	80004c8 <__aeabi_dmul>
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4682      	mov	sl, r0
 8003f8c:	468b      	mov	fp, r1
 8003f8e:	4620      	mov	r0, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	4b54      	ldr	r3, [pc, #336]	; (80040e4 <__ieee754_pow+0x3d4>)
 8003f94:	f7fc fa98 	bl	80004c8 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	a14c      	add	r1, pc, #304	; (adr r1, 80040d0 <__ieee754_pow+0x3c0>)
 8003f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fa2:	f7fc f8d9 	bl	8000158 <__aeabi_dsub>
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	f7fc fa8d 	bl	80004c8 <__aeabi_dmul>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	494c      	ldr	r1, [pc, #304]	; (80040e8 <__ieee754_pow+0x3d8>)
 8003fb6:	f7fc f8cf 	bl	8000158 <__aeabi_dsub>
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	4680      	mov	r8, r0
 8003fc0:	4689      	mov	r9, r1
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f7fc fa7f 	bl	80004c8 <__aeabi_dmul>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc fa79 	bl	80004c8 <__aeabi_dmul>
 8003fd6:	a340      	add	r3, pc, #256	; (adr r3, 80040d8 <__ieee754_pow+0x3c8>)
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f7fc fa74 	bl	80004c8 <__aeabi_dmul>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4650      	mov	r0, sl
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	f7fc f8b6 	bl	8000158 <__aeabi_dsub>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	f7fc f8b0 	bl	800015c <__adddf3>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4632      	mov	r2, r6
 8004000:	463b      	mov	r3, r7
 8004002:	4682      	mov	sl, r0
 8004004:	468b      	mov	fp, r1
 8004006:	f7fc f8a7 	bl	8000158 <__aeabi_dsub>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4620      	mov	r0, r4
 8004010:	4629      	mov	r1, r5
 8004012:	f7fc f8a1 	bl	8000158 <__aeabi_dsub>
 8004016:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800401a:	9b00      	ldr	r3, [sp, #0]
 800401c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800401e:	3b01      	subs	r3, #1
 8004020:	4313      	orrs	r3, r2
 8004022:	f04f 0600 	mov.w	r6, #0
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	bf0c      	ite	eq
 800402c:	4b2f      	ldreq	r3, [pc, #188]	; (80040ec <__ieee754_pow+0x3dc>)
 800402e:	4b2c      	ldrne	r3, [pc, #176]	; (80040e0 <__ieee754_pow+0x3d0>)
 8004030:	4604      	mov	r4, r0
 8004032:	460d      	mov	r5, r1
 8004034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004038:	e9cd 2300 	strd	r2, r3, [sp]
 800403c:	4632      	mov	r2, r6
 800403e:	463b      	mov	r3, r7
 8004040:	f7fc f88a 	bl	8000158 <__aeabi_dsub>
 8004044:	4652      	mov	r2, sl
 8004046:	465b      	mov	r3, fp
 8004048:	f7fc fa3e 	bl	80004c8 <__aeabi_dmul>
 800404c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004050:	4680      	mov	r8, r0
 8004052:	4689      	mov	r9, r1
 8004054:	4620      	mov	r0, r4
 8004056:	4629      	mov	r1, r5
 8004058:	f7fc fa36 	bl	80004c8 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4640      	mov	r0, r8
 8004062:	4649      	mov	r1, r9
 8004064:	f7fc f87a 	bl	800015c <__adddf3>
 8004068:	4632      	mov	r2, r6
 800406a:	463b      	mov	r3, r7
 800406c:	4680      	mov	r8, r0
 800406e:	4689      	mov	r9, r1
 8004070:	4650      	mov	r0, sl
 8004072:	4659      	mov	r1, fp
 8004074:	f7fc fa28 	bl	80004c8 <__aeabi_dmul>
 8004078:	4604      	mov	r4, r0
 800407a:	460d      	mov	r5, r1
 800407c:	460b      	mov	r3, r1
 800407e:	4602      	mov	r2, r0
 8004080:	4649      	mov	r1, r9
 8004082:	4640      	mov	r0, r8
 8004084:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004088:	f7fc f868 	bl	800015c <__adddf3>
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <__ieee754_pow+0x3e0>)
 800408e:	4682      	mov	sl, r0
 8004090:	4299      	cmp	r1, r3
 8004092:	460f      	mov	r7, r1
 8004094:	460e      	mov	r6, r1
 8004096:	f340 82e7 	ble.w	8004668 <__ieee754_pow+0x958>
 800409a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800409e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80040a2:	4303      	orrs	r3, r0
 80040a4:	f000 81e2 	beq.w	800446c <__ieee754_pow+0x75c>
 80040a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2300      	movs	r3, #0
 80040b0:	f7fc fc7c 	bl	80009ac <__aeabi_dcmplt>
 80040b4:	3800      	subs	r0, #0
 80040b6:	bf18      	it	ne
 80040b8:	2001      	movne	r0, #1
 80040ba:	e72f      	b.n	8003f1c <__ieee754_pow+0x20c>
 80040bc:	f3af 8000 	nop.w
 80040c0:	60000000 	.word	0x60000000
 80040c4:	3ff71547 	.word	0x3ff71547
 80040c8:	f85ddf44 	.word	0xf85ddf44
 80040cc:	3e54ae0b 	.word	0x3e54ae0b
 80040d0:	55555555 	.word	0x55555555
 80040d4:	3fd55555 	.word	0x3fd55555
 80040d8:	652b82fe 	.word	0x652b82fe
 80040dc:	3ff71547 	.word	0x3ff71547
 80040e0:	3ff00000 	.word	0x3ff00000
 80040e4:	3fd00000 	.word	0x3fd00000
 80040e8:	3fe00000 	.word	0x3fe00000
 80040ec:	bff00000 	.word	0xbff00000
 80040f0:	408fffff 	.word	0x408fffff
 80040f4:	4bd4      	ldr	r3, [pc, #848]	; (8004448 <__ieee754_pow+0x738>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	402b      	ands	r3, r5
 80040fa:	b943      	cbnz	r3, 800410e <__ieee754_pow+0x3fe>
 80040fc:	4658      	mov	r0, fp
 80040fe:	4661      	mov	r1, ip
 8004100:	4bd2      	ldr	r3, [pc, #840]	; (800444c <__ieee754_pow+0x73c>)
 8004102:	f7fc f9e1 	bl	80004c8 <__aeabi_dmul>
 8004106:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800410a:	4683      	mov	fp, r0
 800410c:	460c      	mov	r4, r1
 800410e:	1523      	asrs	r3, r4, #20
 8004110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004114:	4413      	add	r3, r2
 8004116:	930b      	str	r3, [sp, #44]	; 0x2c
 8004118:	4bcd      	ldr	r3, [pc, #820]	; (8004450 <__ieee754_pow+0x740>)
 800411a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800411e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004122:	429c      	cmp	r4, r3
 8004124:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004128:	dd08      	ble.n	800413c <__ieee754_pow+0x42c>
 800412a:	4bca      	ldr	r3, [pc, #808]	; (8004454 <__ieee754_pow+0x744>)
 800412c:	429c      	cmp	r4, r3
 800412e:	f340 8164 	ble.w	80043fa <__ieee754_pow+0x6ea>
 8004132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004134:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004138:	3301      	adds	r3, #1
 800413a:	930b      	str	r3, [sp, #44]	; 0x2c
 800413c:	2600      	movs	r6, #0
 800413e:	00f3      	lsls	r3, r6, #3
 8004140:	930d      	str	r3, [sp, #52]	; 0x34
 8004142:	4bc5      	ldr	r3, [pc, #788]	; (8004458 <__ieee754_pow+0x748>)
 8004144:	4658      	mov	r0, fp
 8004146:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800414a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800414e:	4629      	mov	r1, r5
 8004150:	461a      	mov	r2, r3
 8004152:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004156:	4623      	mov	r3, r4
 8004158:	f7fb fffe 	bl	8000158 <__aeabi_dsub>
 800415c:	46da      	mov	sl, fp
 800415e:	462b      	mov	r3, r5
 8004160:	4652      	mov	r2, sl
 8004162:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004166:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800416a:	f7fb fff7 	bl	800015c <__adddf3>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	2000      	movs	r0, #0
 8004174:	49b9      	ldr	r1, [pc, #740]	; (800445c <__ieee754_pow+0x74c>)
 8004176:	f7fc fad1 	bl	800071c <__aeabi_ddiv>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004182:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004186:	f7fc f99f 	bl	80004c8 <__aeabi_dmul>
 800418a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800418e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004192:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004196:	2300      	movs	r3, #0
 8004198:	2200      	movs	r2, #0
 800419a:	46ab      	mov	fp, r5
 800419c:	106d      	asrs	r5, r5, #1
 800419e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80041a2:	9304      	str	r3, [sp, #16]
 80041a4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80041a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80041ac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80041b0:	4640      	mov	r0, r8
 80041b2:	4649      	mov	r1, r9
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	f7fc f986 	bl	80004c8 <__aeabi_dmul>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041c4:	f7fb ffc8 	bl	8000158 <__aeabi_dsub>
 80041c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041cc:	4606      	mov	r6, r0
 80041ce:	460f      	mov	r7, r1
 80041d0:	4620      	mov	r0, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	f7fb ffc0 	bl	8000158 <__aeabi_dsub>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4650      	mov	r0, sl
 80041de:	4659      	mov	r1, fp
 80041e0:	f7fb ffba 	bl	8000158 <__aeabi_dsub>
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
 80041e8:	f7fc f96e 	bl	80004c8 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fb ffb0 	bl	8000158 <__aeabi_dsub>
 80041f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041fc:	f7fc f964 	bl	80004c8 <__aeabi_dmul>
 8004200:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004204:	4682      	mov	sl, r0
 8004206:	468b      	mov	fp, r1
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f7fc f95c 	bl	80004c8 <__aeabi_dmul>
 8004210:	a37b      	add	r3, pc, #492	; (adr r3, 8004400 <__ieee754_pow+0x6f0>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	4604      	mov	r4, r0
 8004218:	460d      	mov	r5, r1
 800421a:	f7fc f955 	bl	80004c8 <__aeabi_dmul>
 800421e:	a37a      	add	r3, pc, #488	; (adr r3, 8004408 <__ieee754_pow+0x6f8>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fb ff9a 	bl	800015c <__adddf3>
 8004228:	4622      	mov	r2, r4
 800422a:	462b      	mov	r3, r5
 800422c:	f7fc f94c 	bl	80004c8 <__aeabi_dmul>
 8004230:	a377      	add	r3, pc, #476	; (adr r3, 8004410 <__ieee754_pow+0x700>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f7fb ff91 	bl	800015c <__adddf3>
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	f7fc f943 	bl	80004c8 <__aeabi_dmul>
 8004242:	a375      	add	r3, pc, #468	; (adr r3, 8004418 <__ieee754_pow+0x708>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f7fb ff88 	bl	800015c <__adddf3>
 800424c:	4622      	mov	r2, r4
 800424e:	462b      	mov	r3, r5
 8004250:	f7fc f93a 	bl	80004c8 <__aeabi_dmul>
 8004254:	a372      	add	r3, pc, #456	; (adr r3, 8004420 <__ieee754_pow+0x710>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fb ff7f 	bl	800015c <__adddf3>
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	f7fc f931 	bl	80004c8 <__aeabi_dmul>
 8004266:	a370      	add	r3, pc, #448	; (adr r3, 8004428 <__ieee754_pow+0x718>)
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f7fb ff76 	bl	800015c <__adddf3>
 8004270:	4622      	mov	r2, r4
 8004272:	4606      	mov	r6, r0
 8004274:	460f      	mov	r7, r1
 8004276:	462b      	mov	r3, r5
 8004278:	4620      	mov	r0, r4
 800427a:	4629      	mov	r1, r5
 800427c:	f7fc f924 	bl	80004c8 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	f7fc f91e 	bl	80004c8 <__aeabi_dmul>
 800428c:	4604      	mov	r4, r0
 800428e:	460d      	mov	r5, r1
 8004290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004294:	4642      	mov	r2, r8
 8004296:	464b      	mov	r3, r9
 8004298:	f7fb ff60 	bl	800015c <__adddf3>
 800429c:	4652      	mov	r2, sl
 800429e:	465b      	mov	r3, fp
 80042a0:	f7fc f912 	bl	80004c8 <__aeabi_dmul>
 80042a4:	4622      	mov	r2, r4
 80042a6:	462b      	mov	r3, r5
 80042a8:	f7fb ff58 	bl	800015c <__adddf3>
 80042ac:	4642      	mov	r2, r8
 80042ae:	4606      	mov	r6, r0
 80042b0:	460f      	mov	r7, r1
 80042b2:	464b      	mov	r3, r9
 80042b4:	4640      	mov	r0, r8
 80042b6:	4649      	mov	r1, r9
 80042b8:	f7fc f906 	bl	80004c8 <__aeabi_dmul>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042c4:	2200      	movs	r2, #0
 80042c6:	4b66      	ldr	r3, [pc, #408]	; (8004460 <__ieee754_pow+0x750>)
 80042c8:	f7fb ff48 	bl	800015c <__adddf3>
 80042cc:	4632      	mov	r2, r6
 80042ce:	463b      	mov	r3, r7
 80042d0:	f7fb ff44 	bl	800015c <__adddf3>
 80042d4:	2400      	movs	r4, #0
 80042d6:	460d      	mov	r5, r1
 80042d8:	4622      	mov	r2, r4
 80042da:	460b      	mov	r3, r1
 80042dc:	4640      	mov	r0, r8
 80042de:	4649      	mov	r1, r9
 80042e0:	f7fc f8f2 	bl	80004c8 <__aeabi_dmul>
 80042e4:	2200      	movs	r2, #0
 80042e6:	4680      	mov	r8, r0
 80042e8:	4689      	mov	r9, r1
 80042ea:	4620      	mov	r0, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	4b5c      	ldr	r3, [pc, #368]	; (8004460 <__ieee754_pow+0x750>)
 80042f0:	f7fb ff32 	bl	8000158 <__aeabi_dsub>
 80042f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042f8:	f7fb ff2e 	bl	8000158 <__aeabi_dsub>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4630      	mov	r0, r6
 8004302:	4639      	mov	r1, r7
 8004304:	f7fb ff28 	bl	8000158 <__aeabi_dsub>
 8004308:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800430c:	f7fc f8dc 	bl	80004c8 <__aeabi_dmul>
 8004310:	4622      	mov	r2, r4
 8004312:	4606      	mov	r6, r0
 8004314:	460f      	mov	r7, r1
 8004316:	462b      	mov	r3, r5
 8004318:	4650      	mov	r0, sl
 800431a:	4659      	mov	r1, fp
 800431c:	f7fc f8d4 	bl	80004c8 <__aeabi_dmul>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4630      	mov	r0, r6
 8004326:	4639      	mov	r1, r7
 8004328:	f7fb ff18 	bl	800015c <__adddf3>
 800432c:	2400      	movs	r4, #0
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4640      	mov	r0, r8
 8004338:	4649      	mov	r1, r9
 800433a:	f7fb ff0f 	bl	800015c <__adddf3>
 800433e:	a33c      	add	r3, pc, #240	; (adr r3, 8004430 <__ieee754_pow+0x720>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	4620      	mov	r0, r4
 8004346:	460d      	mov	r5, r1
 8004348:	f7fc f8be 	bl	80004c8 <__aeabi_dmul>
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004354:	4620      	mov	r0, r4
 8004356:	4629      	mov	r1, r5
 8004358:	f7fb fefe 	bl	8000158 <__aeabi_dsub>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4630      	mov	r0, r6
 8004362:	4639      	mov	r1, r7
 8004364:	f7fb fef8 	bl	8000158 <__aeabi_dsub>
 8004368:	a333      	add	r3, pc, #204	; (adr r3, 8004438 <__ieee754_pow+0x728>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc f8ab 	bl	80004c8 <__aeabi_dmul>
 8004372:	a333      	add	r3, pc, #204	; (adr r3, 8004440 <__ieee754_pow+0x730>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	4606      	mov	r6, r0
 800437a:	460f      	mov	r7, r1
 800437c:	4620      	mov	r0, r4
 800437e:	4629      	mov	r1, r5
 8004380:	f7fc f8a2 	bl	80004c8 <__aeabi_dmul>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4630      	mov	r0, r6
 800438a:	4639      	mov	r1, r7
 800438c:	f7fb fee6 	bl	800015c <__adddf3>
 8004390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004392:	4b34      	ldr	r3, [pc, #208]	; (8004464 <__ieee754_pow+0x754>)
 8004394:	4413      	add	r3, r2
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fb fedf 	bl	800015c <__adddf3>
 800439e:	4680      	mov	r8, r0
 80043a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043a2:	4689      	mov	r9, r1
 80043a4:	f7fc f826 	bl	80003f4 <__aeabi_i2d>
 80043a8:	4604      	mov	r4, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043b2:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <__ieee754_pow+0x758>)
 80043b4:	4413      	add	r3, r2
 80043b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80043ba:	4642      	mov	r2, r8
 80043bc:	464b      	mov	r3, r9
 80043be:	f7fb fecd 	bl	800015c <__adddf3>
 80043c2:	4632      	mov	r2, r6
 80043c4:	463b      	mov	r3, r7
 80043c6:	f7fb fec9 	bl	800015c <__adddf3>
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	f7fb fec5 	bl	800015c <__adddf3>
 80043d2:	2000      	movs	r0, #0
 80043d4:	4622      	mov	r2, r4
 80043d6:	462b      	mov	r3, r5
 80043d8:	4682      	mov	sl, r0
 80043da:	468b      	mov	fp, r1
 80043dc:	f7fb febc 	bl	8000158 <__aeabi_dsub>
 80043e0:	4632      	mov	r2, r6
 80043e2:	463b      	mov	r3, r7
 80043e4:	f7fb feb8 	bl	8000158 <__aeabi_dsub>
 80043e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80043ec:	f7fb feb4 	bl	8000158 <__aeabi_dsub>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4640      	mov	r0, r8
 80043f6:	4649      	mov	r1, r9
 80043f8:	e60b      	b.n	8004012 <__ieee754_pow+0x302>
 80043fa:	2601      	movs	r6, #1
 80043fc:	e69f      	b.n	800413e <__ieee754_pow+0x42e>
 80043fe:	bf00      	nop
 8004400:	4a454eef 	.word	0x4a454eef
 8004404:	3fca7e28 	.word	0x3fca7e28
 8004408:	93c9db65 	.word	0x93c9db65
 800440c:	3fcd864a 	.word	0x3fcd864a
 8004410:	a91d4101 	.word	0xa91d4101
 8004414:	3fd17460 	.word	0x3fd17460
 8004418:	518f264d 	.word	0x518f264d
 800441c:	3fd55555 	.word	0x3fd55555
 8004420:	db6fabff 	.word	0xdb6fabff
 8004424:	3fdb6db6 	.word	0x3fdb6db6
 8004428:	33333303 	.word	0x33333303
 800442c:	3fe33333 	.word	0x3fe33333
 8004430:	e0000000 	.word	0xe0000000
 8004434:	3feec709 	.word	0x3feec709
 8004438:	dc3a03fd 	.word	0xdc3a03fd
 800443c:	3feec709 	.word	0x3feec709
 8004440:	145b01f5 	.word	0x145b01f5
 8004444:	be3e2fe0 	.word	0xbe3e2fe0
 8004448:	7ff00000 	.word	0x7ff00000
 800444c:	43400000 	.word	0x43400000
 8004450:	0003988e 	.word	0x0003988e
 8004454:	000bb679 	.word	0x000bb679
 8004458:	08004a90 	.word	0x08004a90
 800445c:	3ff00000 	.word	0x3ff00000
 8004460:	40080000 	.word	0x40080000
 8004464:	08004ab0 	.word	0x08004ab0
 8004468:	08004aa0 	.word	0x08004aa0
 800446c:	a39c      	add	r3, pc, #624	; (adr r3, 80046e0 <__ieee754_pow+0x9d0>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	4640      	mov	r0, r8
 8004474:	4649      	mov	r1, r9
 8004476:	f7fb fe71 	bl	800015c <__adddf3>
 800447a:	4622      	mov	r2, r4
 800447c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004480:	462b      	mov	r3, r5
 8004482:	4650      	mov	r0, sl
 8004484:	4639      	mov	r1, r7
 8004486:	f7fb fe67 	bl	8000158 <__aeabi_dsub>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004492:	f7fc faa9 	bl	80009e8 <__aeabi_dcmpgt>
 8004496:	2800      	cmp	r0, #0
 8004498:	f47f ae06 	bne.w	80040a8 <__ieee754_pow+0x398>
 800449c:	4aa2      	ldr	r2, [pc, #648]	; (8004728 <__ieee754_pow+0xa18>)
 800449e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80044a2:	4293      	cmp	r3, r2
 80044a4:	f340 8100 	ble.w	80046a8 <__ieee754_pow+0x998>
 80044a8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80044ac:	151b      	asrs	r3, r3, #20
 80044ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80044b2:	fa4a fa03 	asr.w	sl, sl, r3
 80044b6:	44b2      	add	sl, r6
 80044b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80044bc:	489b      	ldr	r0, [pc, #620]	; (800472c <__ieee754_pow+0xa1c>)
 80044be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80044c2:	4108      	asrs	r0, r1
 80044c4:	ea00 030a 	and.w	r3, r0, sl
 80044c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80044cc:	f1c1 0114 	rsb	r1, r1, #20
 80044d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80044d4:	fa4a fa01 	asr.w	sl, sl, r1
 80044d8:	2e00      	cmp	r6, #0
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	4620      	mov	r0, r4
 80044e0:	4629      	mov	r1, r5
 80044e2:	bfb8      	it	lt
 80044e4:	f1ca 0a00 	rsblt	sl, sl, #0
 80044e8:	f7fb fe36 	bl	8000158 <__aeabi_dsub>
 80044ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f4:	2400      	movs	r4, #0
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	f7fb fe2f 	bl	800015c <__adddf3>
 80044fe:	a37a      	add	r3, pc, #488	; (adr r3, 80046e8 <__ieee754_pow+0x9d8>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	4620      	mov	r0, r4
 8004506:	460d      	mov	r5, r1
 8004508:	f7fb ffde 	bl	80004c8 <__aeabi_dmul>
 800450c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004510:	4606      	mov	r6, r0
 8004512:	460f      	mov	r7, r1
 8004514:	4620      	mov	r0, r4
 8004516:	4629      	mov	r1, r5
 8004518:	f7fb fe1e 	bl	8000158 <__aeabi_dsub>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4640      	mov	r0, r8
 8004522:	4649      	mov	r1, r9
 8004524:	f7fb fe18 	bl	8000158 <__aeabi_dsub>
 8004528:	a371      	add	r3, pc, #452	; (adr r3, 80046f0 <__ieee754_pow+0x9e0>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fb ffcb 	bl	80004c8 <__aeabi_dmul>
 8004532:	a371      	add	r3, pc, #452	; (adr r3, 80046f8 <__ieee754_pow+0x9e8>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	4680      	mov	r8, r0
 800453a:	4689      	mov	r9, r1
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	f7fb ffc2 	bl	80004c8 <__aeabi_dmul>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4640      	mov	r0, r8
 800454a:	4649      	mov	r1, r9
 800454c:	f7fb fe06 	bl	800015c <__adddf3>
 8004550:	4604      	mov	r4, r0
 8004552:	460d      	mov	r5, r1
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4630      	mov	r0, r6
 800455a:	4639      	mov	r1, r7
 800455c:	f7fb fdfe 	bl	800015c <__adddf3>
 8004560:	4632      	mov	r2, r6
 8004562:	463b      	mov	r3, r7
 8004564:	4680      	mov	r8, r0
 8004566:	4689      	mov	r9, r1
 8004568:	f7fb fdf6 	bl	8000158 <__aeabi_dsub>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb fdf0 	bl	8000158 <__aeabi_dsub>
 8004578:	4642      	mov	r2, r8
 800457a:	4606      	mov	r6, r0
 800457c:	460f      	mov	r7, r1
 800457e:	464b      	mov	r3, r9
 8004580:	4640      	mov	r0, r8
 8004582:	4649      	mov	r1, r9
 8004584:	f7fb ffa0 	bl	80004c8 <__aeabi_dmul>
 8004588:	a35d      	add	r3, pc, #372	; (adr r3, 8004700 <__ieee754_pow+0x9f0>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	4604      	mov	r4, r0
 8004590:	460d      	mov	r5, r1
 8004592:	f7fb ff99 	bl	80004c8 <__aeabi_dmul>
 8004596:	a35c      	add	r3, pc, #368	; (adr r3, 8004708 <__ieee754_pow+0x9f8>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fb fddc 	bl	8000158 <__aeabi_dsub>
 80045a0:	4622      	mov	r2, r4
 80045a2:	462b      	mov	r3, r5
 80045a4:	f7fb ff90 	bl	80004c8 <__aeabi_dmul>
 80045a8:	a359      	add	r3, pc, #356	; (adr r3, 8004710 <__ieee754_pow+0xa00>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fb fdd5 	bl	800015c <__adddf3>
 80045b2:	4622      	mov	r2, r4
 80045b4:	462b      	mov	r3, r5
 80045b6:	f7fb ff87 	bl	80004c8 <__aeabi_dmul>
 80045ba:	a357      	add	r3, pc, #348	; (adr r3, 8004718 <__ieee754_pow+0xa08>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fb fdca 	bl	8000158 <__aeabi_dsub>
 80045c4:	4622      	mov	r2, r4
 80045c6:	462b      	mov	r3, r5
 80045c8:	f7fb ff7e 	bl	80004c8 <__aeabi_dmul>
 80045cc:	a354      	add	r3, pc, #336	; (adr r3, 8004720 <__ieee754_pow+0xa10>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fb fdc3 	bl	800015c <__adddf3>
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	f7fb ff75 	bl	80004c8 <__aeabi_dmul>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4640      	mov	r0, r8
 80045e4:	4649      	mov	r1, r9
 80045e6:	f7fb fdb7 	bl	8000158 <__aeabi_dsub>
 80045ea:	4604      	mov	r4, r0
 80045ec:	460d      	mov	r5, r1
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4640      	mov	r0, r8
 80045f4:	4649      	mov	r1, r9
 80045f6:	f7fb ff67 	bl	80004c8 <__aeabi_dmul>
 80045fa:	2200      	movs	r2, #0
 80045fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004604:	4620      	mov	r0, r4
 8004606:	4629      	mov	r1, r5
 8004608:	f7fb fda6 	bl	8000158 <__aeabi_dsub>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004614:	f7fc f882 	bl	800071c <__aeabi_ddiv>
 8004618:	4632      	mov	r2, r6
 800461a:	4604      	mov	r4, r0
 800461c:	460d      	mov	r5, r1
 800461e:	463b      	mov	r3, r7
 8004620:	4640      	mov	r0, r8
 8004622:	4649      	mov	r1, r9
 8004624:	f7fb ff50 	bl	80004c8 <__aeabi_dmul>
 8004628:	4632      	mov	r2, r6
 800462a:	463b      	mov	r3, r7
 800462c:	f7fb fd96 	bl	800015c <__adddf3>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4620      	mov	r0, r4
 8004636:	4629      	mov	r1, r5
 8004638:	f7fb fd8e 	bl	8000158 <__aeabi_dsub>
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	f7fb fd8a 	bl	8000158 <__aeabi_dsub>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	2000      	movs	r0, #0
 800464a:	4939      	ldr	r1, [pc, #228]	; (8004730 <__ieee754_pow+0xa20>)
 800464c:	f7fb fd84 	bl	8000158 <__aeabi_dsub>
 8004650:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004654:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004658:	da29      	bge.n	80046ae <__ieee754_pow+0x99e>
 800465a:	4652      	mov	r2, sl
 800465c:	f000 f874 	bl	8004748 <scalbn>
 8004660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004664:	f7ff bbfd 	b.w	8003e62 <__ieee754_pow+0x152>
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <__ieee754_pow+0xa24>)
 800466a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800466e:	429f      	cmp	r7, r3
 8004670:	f77f af14 	ble.w	800449c <__ieee754_pow+0x78c>
 8004674:	4b30      	ldr	r3, [pc, #192]	; (8004738 <__ieee754_pow+0xa28>)
 8004676:	440b      	add	r3, r1
 8004678:	4303      	orrs	r3, r0
 800467a:	d009      	beq.n	8004690 <__ieee754_pow+0x980>
 800467c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004680:	2200      	movs	r2, #0
 8004682:	2300      	movs	r3, #0
 8004684:	f7fc f992 	bl	80009ac <__aeabi_dcmplt>
 8004688:	3800      	subs	r0, #0
 800468a:	bf18      	it	ne
 800468c:	2001      	movne	r0, #1
 800468e:	e452      	b.n	8003f36 <__ieee754_pow+0x226>
 8004690:	4622      	mov	r2, r4
 8004692:	462b      	mov	r3, r5
 8004694:	f7fb fd60 	bl	8000158 <__aeabi_dsub>
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	f7fc f99a 	bl	80009d4 <__aeabi_dcmpge>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	f43f aefb 	beq.w	800449c <__ieee754_pow+0x78c>
 80046a6:	e7e9      	b.n	800467c <__ieee754_pow+0x96c>
 80046a8:	f04f 0a00 	mov.w	sl, #0
 80046ac:	e720      	b.n	80044f0 <__ieee754_pow+0x7e0>
 80046ae:	4621      	mov	r1, r4
 80046b0:	e7d6      	b.n	8004660 <__ieee754_pow+0x950>
 80046b2:	f04f 0b00 	mov.w	fp, #0
 80046b6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004730 <__ieee754_pow+0xa20>
 80046ba:	f7ff bbb9 	b.w	8003e30 <__ieee754_pow+0x120>
 80046be:	f04f 0b00 	mov.w	fp, #0
 80046c2:	f04f 0c00 	mov.w	ip, #0
 80046c6:	f7ff bbb3 	b.w	8003e30 <__ieee754_pow+0x120>
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7ff bb3c 	b.w	8003d4a <__ieee754_pow+0x3a>
 80046d2:	9200      	str	r2, [sp, #0]
 80046d4:	f7ff bb88 	b.w	8003de8 <__ieee754_pow+0xd8>
 80046d8:	2300      	movs	r3, #0
 80046da:	f7ff bb72 	b.w	8003dc2 <__ieee754_pow+0xb2>
 80046de:	bf00      	nop
 80046e0:	652b82fe 	.word	0x652b82fe
 80046e4:	3c971547 	.word	0x3c971547
 80046e8:	00000000 	.word	0x00000000
 80046ec:	3fe62e43 	.word	0x3fe62e43
 80046f0:	fefa39ef 	.word	0xfefa39ef
 80046f4:	3fe62e42 	.word	0x3fe62e42
 80046f8:	0ca86c39 	.word	0x0ca86c39
 80046fc:	be205c61 	.word	0xbe205c61
 8004700:	72bea4d0 	.word	0x72bea4d0
 8004704:	3e663769 	.word	0x3e663769
 8004708:	c5d26bf1 	.word	0xc5d26bf1
 800470c:	3ebbbd41 	.word	0x3ebbbd41
 8004710:	af25de2c 	.word	0xaf25de2c
 8004714:	3f11566a 	.word	0x3f11566a
 8004718:	16bebd93 	.word	0x16bebd93
 800471c:	3f66c16c 	.word	0x3f66c16c
 8004720:	5555553e 	.word	0x5555553e
 8004724:	3fc55555 	.word	0x3fc55555
 8004728:	3fe00000 	.word	0x3fe00000
 800472c:	fff00000 	.word	0xfff00000
 8004730:	3ff00000 	.word	0x3ff00000
 8004734:	4090cbff 	.word	0x4090cbff
 8004738:	3f6f3400 	.word	0x3f6f3400

0800473c <fabs>:
 800473c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004740:	4619      	mov	r1, r3
 8004742:	4770      	bx	lr
 8004744:	0000      	movs	r0, r0
	...

08004748 <scalbn>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	4616      	mov	r6, r2
 800474c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004750:	4604      	mov	r4, r0
 8004752:	460d      	mov	r5, r1
 8004754:	460b      	mov	r3, r1
 8004756:	b992      	cbnz	r2, 800477e <scalbn+0x36>
 8004758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800475c:	4303      	orrs	r3, r0
 800475e:	d03c      	beq.n	80047da <scalbn+0x92>
 8004760:	4b31      	ldr	r3, [pc, #196]	; (8004828 <scalbn+0xe0>)
 8004762:	2200      	movs	r2, #0
 8004764:	f7fb feb0 	bl	80004c8 <__aeabi_dmul>
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <scalbn+0xe4>)
 800476a:	4604      	mov	r4, r0
 800476c:	429e      	cmp	r6, r3
 800476e:	460d      	mov	r5, r1
 8004770:	da0f      	bge.n	8004792 <scalbn+0x4a>
 8004772:	a329      	add	r3, pc, #164	; (adr r3, 8004818 <scalbn+0xd0>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f7fb fea6 	bl	80004c8 <__aeabi_dmul>
 800477c:	e006      	b.n	800478c <scalbn+0x44>
 800477e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004782:	42ba      	cmp	r2, r7
 8004784:	d109      	bne.n	800479a <scalbn+0x52>
 8004786:	4602      	mov	r2, r0
 8004788:	f7fb fce8 	bl	800015c <__adddf3>
 800478c:	4604      	mov	r4, r0
 800478e:	460d      	mov	r5, r1
 8004790:	e023      	b.n	80047da <scalbn+0x92>
 8004792:	460b      	mov	r3, r1
 8004794:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004798:	3a36      	subs	r2, #54	; 0x36
 800479a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800479e:	428e      	cmp	r6, r1
 80047a0:	dd0e      	ble.n	80047c0 <scalbn+0x78>
 80047a2:	a31f      	add	r3, pc, #124	; (adr r3, 8004820 <scalbn+0xd8>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80047ac:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80047b0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80047b4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80047b8:	481d      	ldr	r0, [pc, #116]	; (8004830 <scalbn+0xe8>)
 80047ba:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80047be:	e7db      	b.n	8004778 <scalbn+0x30>
 80047c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80047c4:	4432      	add	r2, r6
 80047c6:	428a      	cmp	r2, r1
 80047c8:	dceb      	bgt.n	80047a2 <scalbn+0x5a>
 80047ca:	2a00      	cmp	r2, #0
 80047cc:	dd08      	ble.n	80047e0 <scalbn+0x98>
 80047ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80047da:	4620      	mov	r0, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80047e4:	da0c      	bge.n	8004800 <scalbn+0xb8>
 80047e6:	a30c      	add	r3, pc, #48	; (adr r3, 8004818 <scalbn+0xd0>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80047f0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80047f4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80047f8:	480e      	ldr	r0, [pc, #56]	; (8004834 <scalbn+0xec>)
 80047fa:	f041 011f 	orr.w	r1, r1, #31
 80047fe:	e7bb      	b.n	8004778 <scalbn+0x30>
 8004800:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004804:	3236      	adds	r2, #54	; 0x36
 8004806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800480a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	2200      	movs	r2, #0
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <scalbn+0xf0>)
 8004816:	e7af      	b.n	8004778 <scalbn+0x30>
 8004818:	c2f8f359 	.word	0xc2f8f359
 800481c:	01a56e1f 	.word	0x01a56e1f
 8004820:	8800759c 	.word	0x8800759c
 8004824:	7e37e43c 	.word	0x7e37e43c
 8004828:	43500000 	.word	0x43500000
 800482c:	ffff3cb0 	.word	0xffff3cb0
 8004830:	8800759c 	.word	0x8800759c
 8004834:	c2f8f359 	.word	0xc2f8f359
 8004838:	3c900000 	.word	0x3c900000

0800483c <with_errno>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4604      	mov	r4, r0
 8004840:	460d      	mov	r5, r1
 8004842:	4616      	mov	r6, r2
 8004844:	f7ff f9cc 	bl	8003be0 <__errno>
 8004848:	4629      	mov	r1, r5
 800484a:	6006      	str	r6, [r0, #0]
 800484c:	4620      	mov	r0, r4
 800484e:	bd70      	pop	{r4, r5, r6, pc}

08004850 <xflow>:
 8004850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004852:	4615      	mov	r5, r2
 8004854:	461c      	mov	r4, r3
 8004856:	b180      	cbz	r0, 800487a <xflow+0x2a>
 8004858:	4610      	mov	r0, r2
 800485a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800485e:	e9cd 0100 	strd	r0, r1, [sp]
 8004862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004866:	4628      	mov	r0, r5
 8004868:	4621      	mov	r1, r4
 800486a:	f7fb fe2d 	bl	80004c8 <__aeabi_dmul>
 800486e:	2222      	movs	r2, #34	; 0x22
 8004870:	b003      	add	sp, #12
 8004872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004876:	f7ff bfe1 	b.w	800483c <with_errno>
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	e7ee      	b.n	800485e <xflow+0xe>

08004880 <__math_uflow>:
 8004880:	2200      	movs	r2, #0
 8004882:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004886:	f7ff bfe3 	b.w	8004850 <xflow>

0800488a <__math_oflow>:
 800488a:	2200      	movs	r2, #0
 800488c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004890:	f7ff bfde 	b.w	8004850 <xflow>

08004894 <__ieee754_sqrt>:
 8004894:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004a38 <__ieee754_sqrt+0x1a4>
 8004898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	ea3c 0c01 	bics.w	ip, ip, r1
 80048a0:	460b      	mov	r3, r1
 80048a2:	4606      	mov	r6, r0
 80048a4:	460d      	mov	r5, r1
 80048a6:	460a      	mov	r2, r1
 80048a8:	4604      	mov	r4, r0
 80048aa:	d10e      	bne.n	80048ca <__ieee754_sqrt+0x36>
 80048ac:	4602      	mov	r2, r0
 80048ae:	f7fb fe0b 	bl	80004c8 <__aeabi_dmul>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4630      	mov	r0, r6
 80048b8:	4629      	mov	r1, r5
 80048ba:	f7fb fc4f 	bl	800015c <__adddf3>
 80048be:	4606      	mov	r6, r0
 80048c0:	460d      	mov	r5, r1
 80048c2:	4630      	mov	r0, r6
 80048c4:	4629      	mov	r1, r5
 80048c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ca:	2900      	cmp	r1, #0
 80048cc:	dc0d      	bgt.n	80048ea <__ieee754_sqrt+0x56>
 80048ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80048d2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80048d6:	d0f4      	beq.n	80048c2 <__ieee754_sqrt+0x2e>
 80048d8:	b139      	cbz	r1, 80048ea <__ieee754_sqrt+0x56>
 80048da:	4602      	mov	r2, r0
 80048dc:	f7fb fc3c 	bl	8000158 <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	f7fb ff1a 	bl	800071c <__aeabi_ddiv>
 80048e8:	e7e9      	b.n	80048be <__ieee754_sqrt+0x2a>
 80048ea:	1512      	asrs	r2, r2, #20
 80048ec:	f000 8089 	beq.w	8004a02 <__ieee754_sqrt+0x16e>
 80048f0:	2500      	movs	r5, #0
 80048f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80048fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048fe:	07d2      	lsls	r2, r2, #31
 8004900:	bf5c      	itt	pl
 8004902:	005b      	lslpl	r3, r3, #1
 8004904:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800490c:	bf58      	it	pl
 800490e:	0064      	lslpl	r4, r4, #1
 8004910:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004914:	0062      	lsls	r2, r4, #1
 8004916:	2016      	movs	r0, #22
 8004918:	4629      	mov	r1, r5
 800491a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800491e:	1076      	asrs	r6, r6, #1
 8004920:	190f      	adds	r7, r1, r4
 8004922:	429f      	cmp	r7, r3
 8004924:	bfde      	ittt	le
 8004926:	1bdb      	suble	r3, r3, r7
 8004928:	1939      	addle	r1, r7, r4
 800492a:	192d      	addle	r5, r5, r4
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	3801      	subs	r0, #1
 8004930:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004934:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004938:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800493c:	d1f0      	bne.n	8004920 <__ieee754_sqrt+0x8c>
 800493e:	4604      	mov	r4, r0
 8004940:	2720      	movs	r7, #32
 8004942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004946:	428b      	cmp	r3, r1
 8004948:	eb0c 0e00 	add.w	lr, ip, r0
 800494c:	dc02      	bgt.n	8004954 <__ieee754_sqrt+0xc0>
 800494e:	d113      	bne.n	8004978 <__ieee754_sqrt+0xe4>
 8004950:	4596      	cmp	lr, r2
 8004952:	d811      	bhi.n	8004978 <__ieee754_sqrt+0xe4>
 8004954:	f1be 0f00 	cmp.w	lr, #0
 8004958:	eb0e 000c 	add.w	r0, lr, ip
 800495c:	da56      	bge.n	8004a0c <__ieee754_sqrt+0x178>
 800495e:	2800      	cmp	r0, #0
 8004960:	db54      	blt.n	8004a0c <__ieee754_sqrt+0x178>
 8004962:	f101 0801 	add.w	r8, r1, #1
 8004966:	1a5b      	subs	r3, r3, r1
 8004968:	4641      	mov	r1, r8
 800496a:	4596      	cmp	lr, r2
 800496c:	bf88      	it	hi
 800496e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004972:	eba2 020e 	sub.w	r2, r2, lr
 8004976:	4464      	add	r4, ip
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	3f01      	subs	r7, #1
 800497c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004980:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004984:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004988:	d1dd      	bne.n	8004946 <__ieee754_sqrt+0xb2>
 800498a:	4313      	orrs	r3, r2
 800498c:	d01b      	beq.n	80049c6 <__ieee754_sqrt+0x132>
 800498e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004a3c <__ieee754_sqrt+0x1a8>
 8004992:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004a40 <__ieee754_sqrt+0x1ac>
 8004996:	e9da 0100 	ldrd	r0, r1, [sl]
 800499a:	e9db 2300 	ldrd	r2, r3, [fp]
 800499e:	f7fb fbdb 	bl	8000158 <__aeabi_dsub>
 80049a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4640      	mov	r0, r8
 80049ac:	4649      	mov	r1, r9
 80049ae:	f7fc f807 	bl	80009c0 <__aeabi_dcmple>
 80049b2:	b140      	cbz	r0, 80049c6 <__ieee754_sqrt+0x132>
 80049b4:	e9da 0100 	ldrd	r0, r1, [sl]
 80049b8:	e9db 2300 	ldrd	r2, r3, [fp]
 80049bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80049c0:	d126      	bne.n	8004a10 <__ieee754_sqrt+0x17c>
 80049c2:	463c      	mov	r4, r7
 80049c4:	3501      	adds	r5, #1
 80049c6:	106b      	asrs	r3, r5, #1
 80049c8:	0864      	lsrs	r4, r4, #1
 80049ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80049ce:	07ea      	lsls	r2, r5, #31
 80049d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80049d4:	bf48      	it	mi
 80049d6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80049da:	4620      	mov	r0, r4
 80049dc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80049e0:	e76d      	b.n	80048be <__ieee754_sqrt+0x2a>
 80049e2:	0ae3      	lsrs	r3, r4, #11
 80049e4:	3915      	subs	r1, #21
 80049e6:	0564      	lsls	r4, r4, #21
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0fa      	beq.n	80049e2 <__ieee754_sqrt+0x14e>
 80049ec:	02d8      	lsls	r0, r3, #11
 80049ee:	d50a      	bpl.n	8004a06 <__ieee754_sqrt+0x172>
 80049f0:	f1c2 0020 	rsb	r0, r2, #32
 80049f4:	fa24 f000 	lsr.w	r0, r4, r0
 80049f8:	1e55      	subs	r5, r2, #1
 80049fa:	4094      	lsls	r4, r2
 80049fc:	4303      	orrs	r3, r0
 80049fe:	1b4a      	subs	r2, r1, r5
 8004a00:	e776      	b.n	80048f0 <__ieee754_sqrt+0x5c>
 8004a02:	4611      	mov	r1, r2
 8004a04:	e7f0      	b.n	80049e8 <__ieee754_sqrt+0x154>
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	3201      	adds	r2, #1
 8004a0a:	e7ef      	b.n	80049ec <__ieee754_sqrt+0x158>
 8004a0c:	4688      	mov	r8, r1
 8004a0e:	e7aa      	b.n	8004966 <__ieee754_sqrt+0xd2>
 8004a10:	f7fb fba4 	bl	800015c <__adddf3>
 8004a14:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	4649      	mov	r1, r9
 8004a20:	f7fb ffc4 	bl	80009ac <__aeabi_dcmplt>
 8004a24:	b120      	cbz	r0, 8004a30 <__ieee754_sqrt+0x19c>
 8004a26:	1ca1      	adds	r1, r4, #2
 8004a28:	bf08      	it	eq
 8004a2a:	3501      	addeq	r5, #1
 8004a2c:	3402      	adds	r4, #2
 8004a2e:	e7ca      	b.n	80049c6 <__ieee754_sqrt+0x132>
 8004a30:	3401      	adds	r4, #1
 8004a32:	f024 0401 	bic.w	r4, r4, #1
 8004a36:	e7c6      	b.n	80049c6 <__ieee754_sqrt+0x132>
 8004a38:	7ff00000 	.word	0x7ff00000
 8004a3c:	20000088 	.word	0x20000088
 8004a40:	20000090 	.word	0x20000090

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
